
spi_task_g0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea0  08005ea0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ea8  08005ea8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001508  20000010  08005ec0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001518  08005ec0  00021518  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4a3  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038bf  00000000  00000000  0003c4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  0003fda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001770  00000000  00000000  00041690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018da1  00000000  00000000  00042e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000145ac  00000000  00000000  0005bba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d955  00000000  00000000  0007014d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010daa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059b0  00000000  00000000  0010db20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005da0 	.word	0x08005da0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005da0 	.word	0x08005da0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8cf 	bl	8000420 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ca 	bl	8000420 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzsi2>:
 80003e4:	211c      	movs	r1, #28
 80003e6:	2301      	movs	r3, #1
 80003e8:	041b      	lsls	r3, r3, #16
 80003ea:	4298      	cmp	r0, r3
 80003ec:	d301      	bcc.n	80003f2 <__clzsi2+0xe>
 80003ee:	0c00      	lsrs	r0, r0, #16
 80003f0:	3910      	subs	r1, #16
 80003f2:	0a1b      	lsrs	r3, r3, #8
 80003f4:	4298      	cmp	r0, r3
 80003f6:	d301      	bcc.n	80003fc <__clzsi2+0x18>
 80003f8:	0a00      	lsrs	r0, r0, #8
 80003fa:	3908      	subs	r1, #8
 80003fc:	091b      	lsrs	r3, r3, #4
 80003fe:	4298      	cmp	r0, r3
 8000400:	d301      	bcc.n	8000406 <__clzsi2+0x22>
 8000402:	0900      	lsrs	r0, r0, #4
 8000404:	3904      	subs	r1, #4
 8000406:	a202      	add	r2, pc, #8	; (adr r2, 8000410 <__clzsi2+0x2c>)
 8000408:	5c10      	ldrb	r0, [r2, r0]
 800040a:	1840      	adds	r0, r0, r1
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	02020304 	.word	0x02020304
 8000414:	01010101 	.word	0x01010101
	...

08000420 <__clzdi2>:
 8000420:	b510      	push	{r4, lr}
 8000422:	2900      	cmp	r1, #0
 8000424:	d103      	bne.n	800042e <__clzdi2+0xe>
 8000426:	f7ff ffdd 	bl	80003e4 <__clzsi2>
 800042a:	3020      	adds	r0, #32
 800042c:	e002      	b.n	8000434 <__clzdi2+0x14>
 800042e:	1c08      	adds	r0, r1, #0
 8000430:	f7ff ffd8 	bl	80003e4 <__clzsi2>
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <drv_setPwmMode>:
TD_DRV83;

typedef struct TD_DRV83 drv83;
*/
void drv_setPwmMode(EN_DRV_MODES select)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	0002      	movs	r2, r0
 8000440:	1dfb      	adds	r3, r7, #7
 8000442:	701a      	strb	r2, [r3, #0]
	uint16_t bitMask = 0;
 8000444:	210e      	movs	r1, #14
 8000446:	187b      	adds	r3, r7, r1
 8000448:	2200      	movs	r2, #0
 800044a:	801a      	strh	r2, [r3, #0]

	drv_readRegister((uint8_t)select, &bitMask);
 800044c:	187a      	adds	r2, r7, r1
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f000 f879 	bl	800054c <drv_readRegister>

	switch (select) {
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d018      	beq.n	8000494 <drv_setPwmMode+0x5c>
 8000462:	2b02      	cmp	r3, #2
 8000464:	d002      	beq.n	800046c <drv_setPwmMode+0x34>
 8000466:	2b00      	cmp	r3, #0
 8000468:	d028      	beq.n	80004bc <drv_setPwmMode+0x84>
			break;

		default:


			break;
 800046a:	e03b      	b.n	80004e4 <drv_setPwmMode+0xac>
			utils_set_bit_in_Word(&bitMask, 5, 0);
 800046c:	240e      	movs	r4, #14
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2200      	movs	r2, #0
 8000472:	2105      	movs	r1, #5
 8000474:	0018      	movs	r0, r3
 8000476:	f000 fbb8 	bl	8000bea <utils_set_bit_in_Word>
			utils_set_bit_in_Word(&bitMask, 6, 1);
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2201      	movs	r2, #1
 800047e:	2106      	movs	r1, #6
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fbb2 	bl	8000bea <utils_set_bit_in_Word>
			drv_writeRegister(driverControl, bitMask);
 8000486:	193b      	adds	r3, r7, r4
 8000488:	881b      	ldrh	r3, [r3, #0]
 800048a:	0019      	movs	r1, r3
 800048c:	2002      	movs	r0, #2
 800048e:	f000 f82d 	bl	80004ec <drv_writeRegister>
			break;
 8000492:	e027      	b.n	80004e4 <drv_setPwmMode+0xac>
			utils_set_bit_in_Word(&bitMask, 5, 1);
 8000494:	240e      	movs	r4, #14
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2201      	movs	r2, #1
 800049a:	2105      	movs	r1, #5
 800049c:	0018      	movs	r0, r3
 800049e:	f000 fba4 	bl	8000bea <utils_set_bit_in_Word>
			utils_set_bit_in_Word(&bitMask, 6, 0);
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2200      	movs	r2, #0
 80004a6:	2106      	movs	r1, #6
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fb9e 	bl	8000bea <utils_set_bit_in_Word>
			drv_writeRegister(driverControl, bitMask);
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	0019      	movs	r1, r3
 80004b4:	2002      	movs	r0, #2
 80004b6:	f000 f819 	bl	80004ec <drv_writeRegister>
			break;
 80004ba:	e013      	b.n	80004e4 <drv_setPwmMode+0xac>
			utils_set_bit_in_Word(&bitMask, 5, 0);
 80004bc:	240e      	movs	r4, #14
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2200      	movs	r2, #0
 80004c2:	2105      	movs	r1, #5
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fb90 	bl	8000bea <utils_set_bit_in_Word>
			utils_set_bit_in_Word(&bitMask, 6, 0);
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	2200      	movs	r2, #0
 80004ce:	2106      	movs	r1, #6
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fb8a 	bl	8000bea <utils_set_bit_in_Word>
			drv_writeRegister(driverControl, bitMask);
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	0019      	movs	r1, r3
 80004dc:	2002      	movs	r0, #2
 80004de:	f000 f805 	bl	80004ec <drv_writeRegister>
			break;
 80004e2:	46c0      	nop			; (mov r8, r8)
	}

}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b005      	add	sp, #20
 80004ea:	bd90      	pop	{r4, r7, pc}

080004ec <drv_writeRegister>:

void drv_writeRegister	(uint8_t regNr, uint16_t bitMask)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0002      	movs	r2, r0
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	1c0a      	adds	r2, r1, #0
 80004fc:	801a      	strh	r2, [r3, #0]
	uint8_t pTxData[2];
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	0219      	lsls	r1, r3, #8
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2200      	movs	r2, #0
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fe83 	bl	8001214 <HAL_GPIO_WritePin>
	utils_get_bytes_in_word(&bitMask, &pTxData[0], &pTxData[1] );
 800050e:	210c      	movs	r1, #12
 8000510:	187b      	adds	r3, r7, r1
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	000c      	movs	r4, r1
 8000516:	1879      	adds	r1, r7, r1
 8000518:	1d3b      	adds	r3, r7, #4
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fb3a 	bl	8000b94 <utils_get_bytes_in_word>

	//HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 2, HAL_TIMEOUT);
	HAL_SPI_Transmit(&hspi1, pTxData, 2, HAL_TIMEOUT);
 8000520:	0021      	movs	r1, r4
 8000522:	1879      	adds	r1, r7, r1
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <drv_writeRegister+0x5c>)
 8000526:	2303      	movs	r3, #3
 8000528:	2202      	movs	r2, #2
 800052a:	f001 fc89 	bl	8001e40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	0219      	lsls	r1, r3, #8
 8000532:	23a0      	movs	r3, #160	; 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	2201      	movs	r2, #1
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fe6b 	bl	8001214 <HAL_GPIO_WritePin>
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b005      	add	sp, #20
 8000544:	bd90      	pop	{r4, r7, pc}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	20001394 	.word	0x20001394

0800054c <drv_readRegister>:

void drv_readRegister	(uint8_t regNr, uint16_t* data)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b087      	sub	sp, #28
 8000550:	af02      	add	r7, sp, #8
 8000552:	0002      	movs	r2, r0
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	701a      	strb	r2, [r3, #0]
	uint8_t pTxData[2];
	uint8_t pRxData[2];
	pTxData[1] =0x90;
 800055a:	240c      	movs	r4, #12
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2290      	movs	r2, #144	; 0x90
 8000560:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 0);
 8000562:	2380      	movs	r3, #128	; 0x80
 8000564:	0219      	lsls	r1, r3, #8
 8000566:	23a0      	movs	r3, #160	; 0xa0
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	2200      	movs	r2, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fe51 	bl	8001214 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 1, HAL_TIMEOUT);
 8000572:	2308      	movs	r3, #8
 8000574:	18fa      	adds	r2, r7, r3
 8000576:	1939      	adds	r1, r7, r4
 8000578:	4808      	ldr	r0, [pc, #32]	; (800059c <drv_readRegister+0x50>)
 800057a:	2303      	movs	r3, #3
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2301      	movs	r3, #1
 8000580:	f001 fdb6 	bl	80020f0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, 1);
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	0219      	lsls	r1, r3, #8
 8000588:	23a0      	movs	r3, #160	; 0xa0
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	2201      	movs	r2, #1
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fe40 	bl	8001214 <HAL_GPIO_WritePin>

}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b005      	add	sp, #20
 800059a:	bd90      	pop	{r4, r7, pc}
 800059c:	20001394 	.word	0x20001394

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <MX_FREERTOS_Init+0x1c>)
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_FREERTOS_Init+0x20>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 f9ca 	bl	8003944 <osThreadNew>
 80005b0:	0002      	movs	r2, r0
 80005b2:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <MX_FREERTOS_Init+0x24>)
 80005b4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	08005ddc 	.word	0x08005ddc
 80005c0:	080005c9 	.word	0x080005c9
 80005c4:	20001134 	.word	0x20001134

080005c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d0:	2001      	movs	r0, #1
 80005d2:	f003 fa4d 	bl	8003a70 <osDelay>
    drv_setPwmMode(pwm_3x);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff ff2e 	bl	8000438 <drv_setPwmMode>
    osDelay(1);
 80005dc:	e7f8      	b.n	80005d0 <StartDefaultTask+0x8>
	...

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b08b      	sub	sp, #44	; 0x2c
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	2414      	movs	r4, #20
 80005e8:	193b      	adds	r3, r7, r4
 80005ea:	0018      	movs	r0, r3
 80005ec:	2314      	movs	r3, #20
 80005ee:	001a      	movs	r2, r3
 80005f0:	2100      	movs	r1, #0
 80005f2:	f005 fbcc 	bl	8005d8e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <MX_GPIO_Init+0x110>)
 80005f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005fa:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <MX_GPIO_Init+0x110>)
 80005fc:	2104      	movs	r1, #4
 80005fe:	430a      	orrs	r2, r1
 8000600:	635a      	str	r2, [r3, #52]	; 0x34
 8000602:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <MX_GPIO_Init+0x110>)
 8000604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000606:	2204      	movs	r2, #4
 8000608:	4013      	ands	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060e:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <MX_GPIO_Init+0x110>)
 8000610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000612:	4b37      	ldr	r3, [pc, #220]	; (80006f0 <MX_GPIO_Init+0x110>)
 8000614:	2120      	movs	r1, #32
 8000616:	430a      	orrs	r2, r1
 8000618:	635a      	str	r2, [r3, #52]	; 0x34
 800061a:	4b35      	ldr	r3, [pc, #212]	; (80006f0 <MX_GPIO_Init+0x110>)
 800061c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061e:	2220      	movs	r2, #32
 8000620:	4013      	ands	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <MX_GPIO_Init+0x110>)
 8000628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <MX_GPIO_Init+0x110>)
 800062c:	2101      	movs	r1, #1
 800062e:	430a      	orrs	r2, r1
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
 8000632:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <MX_GPIO_Init+0x110>)
 8000634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000636:	2201      	movs	r2, #1
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <MX_GPIO_Init+0x110>)
 8000640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0x110>)
 8000644:	2102      	movs	r1, #2
 8000646:	430a      	orrs	r2, r1
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
 800064a:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <MX_GPIO_Init+0x110>)
 800064c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800064e:	2202      	movs	r2, #2
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <MX_GPIO_Init+0x114>)
 8000658:	2200      	movs	r2, #0
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fdd9 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	0219      	lsls	r1, r3, #8
 8000666:	23a0      	movs	r3, #160	; 0xa0
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	2200      	movs	r2, #0
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fdd1 	bl	8001214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000672:	0021      	movs	r1, r4
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2204      	movs	r2, #4
 8000678:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <MX_GPIO_Init+0x118>)
 800067e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000686:	000c      	movs	r4, r1
 8000688:	187b      	adds	r3, r7, r1
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <MX_GPIO_Init+0x11c>)
 800068c:	0019      	movs	r1, r3
 800068e:	0010      	movs	r0, r2
 8000690:	f000 fc5c 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000694:	0021      	movs	r1, r4
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2201      	movs	r2, #1
 80006a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006ae:	000c      	movs	r4, r1
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <MX_GPIO_Init+0x114>)
 80006b4:	0019      	movs	r1, r3
 80006b6:	0010      	movs	r0, r2
 80006b8:	f000 fc48 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80006bc:	0021      	movs	r1, r4
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	0212      	lsls	r2, r2, #8
 80006c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80006d8:	187a      	adds	r2, r7, r1
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fc33 	bl	8000f4c <HAL_GPIO_Init>

}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b00b      	add	sp, #44	; 0x2c
 80006ec:	bd90      	pop	{r4, r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000
 80006f4:	50000800 	.word	0x50000800
 80006f8:	10110000 	.word	0x10110000
 80006fc:	50001400 	.word	0x50001400

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f000 facc 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f80d 	bl	8000726 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f7ff ff68 	bl	80005e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000710:	f000 f9c2 	bl	8000a98 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000714:	f000 f87c 	bl	8000810 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000718:	f003 f8cc 	bl	80038b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 800071c:	f7ff ff40 	bl	80005a0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000720:	f003 f8ea 	bl	80038f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x24>

08000726 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000726:	b590      	push	{r4, r7, lr}
 8000728:	b093      	sub	sp, #76	; 0x4c
 800072a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072c:	2410      	movs	r4, #16
 800072e:	193b      	adds	r3, r7, r4
 8000730:	0018      	movs	r0, r3
 8000732:	2338      	movs	r3, #56	; 0x38
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f005 fb29 	bl	8005d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	003b      	movs	r3, r7
 800073e:	0018      	movs	r0, r3
 8000740:	2310      	movs	r3, #16
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f005 fb22 	bl	8005d8e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fd7e 	bl	8001250 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2202      	movs	r2, #2
 8000758:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2240      	movs	r2, #64	; 0x40
 800076e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2202      	movs	r2, #2
 8000774:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2202      	movs	r2, #2
 800077a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2208      	movs	r2, #8
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	0292      	lsls	r2, r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	0492      	lsls	r2, r2, #18
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	0592      	lsls	r2, r2, #22
 800079e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fda0 	bl	80012e8 <HAL_RCC_OscConfig>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007ac:	f000 f82c 	bl	8000808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	003b      	movs	r3, r7
 80007b2:	2207      	movs	r2, #7
 80007b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	003b      	movs	r3, r7
 80007b8:	2202      	movs	r2, #2
 80007ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c8:	003b      	movs	r3, r7
 80007ca:	2102      	movs	r1, #2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 f8ab 	bl	8001928 <HAL_RCC_ClockConfig>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007d6:	f000 f817 	bl	8000808 <Error_Handler>
  }
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b013      	add	sp, #76	; 0x4c
 80007e0:	bd90      	pop	{r4, r7, pc}
	...

080007e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d101      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007f6:	f000 fa73 	bl	8000ce0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40014400 	.word	0x40014400

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080e:	e7fe      	b.n	800080e <Error_Handler+0x6>

08000810 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_SPI1_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <MX_SPI1_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_SPI1_Init+0x74>)
 800081c:	2282      	movs	r2, #130	; 0x82
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_SPI1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_SPI1_Init+0x74>)
 800082a:	22f0      	movs	r2, #240	; 0xf0
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_SPI1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_SPI1_Init+0x74>)
 8000838:	2201      	movs	r2, #1
 800083a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_SPI1_Init+0x74>)
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	0092      	lsls	r2, r2, #2
 8000842:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_SPI1_Init+0x74>)
 8000846:	2238      	movs	r2, #56	; 0x38
 8000848:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_SPI1_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_SPI1_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_SPI1_Init+0x74>)
 800085e:	2207      	movs	r2, #7
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_SPI1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_SPI1_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <MX_SPI1_Init+0x74>)
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fa2d 	bl	8001cd0 <HAL_SPI_Init>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800087a:	f7ff ffc5 	bl	8000808 <Error_Handler>
  }

}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20001394 	.word	0x20001394
 8000888:	40013000 	.word	0x40013000

0800088c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	2314      	movs	r3, #20
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f005 fa75 	bl	8005d8e <memset>
  if(spiHandle->Instance==SPI1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <HAL_SPI_MspInit+0x9c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d137      	bne.n	800091e <HAL_SPI_MspInit+0x92>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <HAL_SPI_MspInit+0xa0>)
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <HAL_SPI_MspInit+0xa0>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0149      	lsls	r1, r1, #5
 80008b8:	430a      	orrs	r2, r1
 80008ba:	641a      	str	r2, [r3, #64]	; 0x40
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <HAL_SPI_MspInit+0xa0>)
 80008be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	015b      	lsls	r3, r3, #5
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <HAL_SPI_MspInit+0xa0>)
 80008cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <HAL_SPI_MspInit+0xa0>)
 80008d0:	2102      	movs	r1, #2
 80008d2:	430a      	orrs	r2, r1
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_SPI_MspInit+0xa0>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008da:	2202      	movs	r2, #2
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80008e2:	2114      	movs	r1, #20
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2238      	movs	r2, #56	; 0x38
 80008e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2202      	movs	r2, #2
 80008ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	187b      	adds	r3, r7, r1
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_SPI_MspInit+0xa4>)
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f000 fb1f 	bl	8000f4c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2103      	movs	r1, #3
 8000912:	2019      	movs	r0, #25
 8000914:	f000 fa88 	bl	8000e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000918:	2019      	movs	r0, #25
 800091a:	f000 fa9a 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b00a      	add	sp, #40	; 0x28
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	40013000 	.word	0x40013000
 800092c:	40021000 	.word	0x40021000
 8000930:	50000400 	.word	0x50000400

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_MspInit+0x50>)
 800093c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_MspInit+0x50>)
 8000940:	2101      	movs	r1, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	641a      	str	r2, [r3, #64]	; 0x40
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x50>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	2201      	movs	r2, #1
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x50>)
 8000954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_MspInit+0x50>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0549      	lsls	r1, r1, #21
 800095c:	430a      	orrs	r2, r1
 800095e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_MspInit+0x50>)
 8000962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	055b      	lsls	r3, r3, #21
 8000968:	4013      	ands	r3, r2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800096e:	2302      	movs	r3, #2
 8000970:	425b      	negs	r3, r3
 8000972:	2200      	movs	r2, #0
 8000974:	2103      	movs	r1, #3
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fa56 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM16_IRQn, TickPriority ,0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	0019      	movs	r1, r3
 800099e:	2015      	movs	r0, #21
 80009a0:	f000 fa42 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80009a4:	2015      	movs	r0, #21
 80009a6:	f000 fa54 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <HAL_InitTick+0xa8>)
 80009ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <HAL_InitTick+0xa8>)
 80009b0:	2180      	movs	r1, #128	; 0x80
 80009b2:	0289      	lsls	r1, r1, #10
 80009b4:	430a      	orrs	r2, r1
 80009b6:	641a      	str	r2, [r3, #64]	; 0x40
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <HAL_InitTick+0xa8>)
 80009ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	029b      	lsls	r3, r3, #10
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009c6:	230c      	movs	r3, #12
 80009c8:	18fa      	adds	r2, r7, r3
 80009ca:	2310      	movs	r3, #16
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 f953 	bl	8001c7c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009d6:	f001 f93b 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 80009da:	0003      	movs	r3, r0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	4914      	ldr	r1, [pc, #80]	; (8000a34 <HAL_InitTick+0xac>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f7ff fb90 	bl	8000108 <__udivsi3>
 80009e8:	0003      	movs	r3, r0
 80009ea:	3b01      	subs	r3, #1
 80009ec:	623b      	str	r3, [r7, #32]

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0xb0>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <HAL_InitTick+0xb4>)
 80009f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_InitTick+0xb0>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <HAL_InitTick+0xb8>)
 80009f8:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <HAL_InitTick+0xb0>)
 80009fc:	6a3a      	ldr	r2, [r7, #32]
 80009fe:	605a      	str	r2, [r3, #4]
  htim16.Init.ClockDivision = 0;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_InitTick+0xb0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <HAL_InitTick+0xb0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_InitTick+0xb0>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 ffc8 	bl	80029a4 <HAL_TIM_Base_Init>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d105      	bne.n	8000a24 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <HAL_InitTick+0xb0>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f002 f822 	bl	8002a64 <HAL_TIM_Base_Start_IT>
 8000a20:	0003      	movs	r3, r0
 8000a22:	e000      	b.n	8000a26 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
}
 8000a26:	0018      	movs	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b00a      	add	sp, #40	; 0x28
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	40021000 	.word	0x40021000
 8000a34:	000f4240 	.word	0x000f4240
 8000a38:	200013f8 	.word	0x200013f8
 8000a3c:	40014400 	.word	0x40014400
 8000a40:	000003e7 	.word	0x000003e7

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <TIM16_IRQHandler+0x14>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 f858 	bl	8002b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	200013f8 	.word	0x200013f8

08000a68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <SPI1_IRQHandler+0x14>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f001 fd12 	bl	8002498 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	20001394 	.word	0x20001394

08000a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <SystemInit+0x14>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	0512      	lsls	r2, r2, #20
 8000a8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <MX_USART2_UART_Init+0x64>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000aa4:	22e1      	movs	r2, #225	; 0xe1
 8000aa6:	0252      	lsls	r2, r2, #9
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_7B;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	0552      	lsls	r2, r2, #21
 8000ab0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ac0:	220c      	movs	r2, #12
 8000ac2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <MX_USART2_UART_Init+0x60>)
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 f9f1 	bl	8002ecc <HAL_UART_Init>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000aee:	f7ff fe8b 	bl	8000808 <Error_Handler>
  }

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20001444 	.word	0x20001444
 8000afc:	40004400 	.word	0x40004400

08000b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	2314      	movs	r3, #20
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2314      	movs	r3, #20
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f005 f93b 	bl	8005d8e <memset>
  if(uartHandle->Instance==USART2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <HAL_UART_MspInit+0x8c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d130      	bne.n	8000b84 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	0289      	lsls	r1, r1, #10
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	029b      	lsls	r3, r3, #10
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	430a      	orrs	r2, r1
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_UART_MspInit+0x90>)
 8000b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000b56:	2114      	movs	r1, #20
 8000b58:	187b      	adds	r3, r7, r1
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2202      	movs	r2, #2
 8000b62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2201      	movs	r2, #1
 8000b68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2201      	movs	r2, #1
 8000b74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	187a      	adds	r2, r7, r1
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f9e4 	bl	8000f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b00a      	add	sp, #40	; 0x28
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	40021000 	.word	0x40021000

08000b94 <utils_get_bytes_in_word>:
    *hbyte = highbyte;
    return dword;
    }

void utils_get_bytes_in_word(uint16_t* word, uint8_t* lbyte, uint8_t* hbyte)
    {
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b087      	sub	sp, #28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
    uint16_t dword=*word;
 8000ba0:	2116      	movs	r1, #22
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	8812      	ldrh	r2, [r2, #0]
 8000ba8:	801a      	strh	r2, [r3, #0]
    uint8_t lowbyte=*lbyte;
 8000baa:	2015      	movs	r0, #21
 8000bac:	183b      	adds	r3, r7, r0
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	701a      	strb	r2, [r3, #0]
    uint8_t highbyte=*hbyte;
 8000bb4:	2414      	movs	r4, #20
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	7812      	ldrb	r2, [r2, #0]
 8000bbc:	701a      	strb	r2, [r3, #0]
    highbyte = dword >> 8;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	0a1b      	lsrs	r3, r3, #8
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	701a      	strb	r2, [r3, #0]
    lowbyte = dword;
 8000bca:	183b      	adds	r3, r7, r0
 8000bcc:	187a      	adds	r2, r7, r1
 8000bce:	8812      	ldrh	r2, [r2, #0]
 8000bd0:	701a      	strb	r2, [r3, #0]
    *lbyte = lowbyte;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	183a      	adds	r2, r7, r0
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	701a      	strb	r2, [r3, #0]
    *hbyte =highbyte;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	193a      	adds	r2, r7, r4
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	701a      	strb	r2, [r3, #0]

    }
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b007      	add	sp, #28
 8000be8:	bd90      	pop	{r4, r7, pc}

08000bea <utils_set_bit_in_Word>:
    {

    }

void utils_set_bit_in_Word(uint16_t *word, uint8_t pos, bool state)
	{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	0008      	movs	r0, r1
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	1cfb      	adds	r3, r7, #3
 8000bf8:	1c02      	adds	r2, r0, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	1cbb      	adds	r3, r7, #2
 8000bfe:	1c0a      	adds	r2, r1, #0
 8000c00:	701a      	strb	r2, [r3, #0]
	switch (state)
 8000c02:	1cbb      	adds	r3, r7, #2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d10c      	bne.n	8000c24 <utils_set_bit_in_Word+0x3a>
	    {
	    case 1:
		*word |= 1UL << pos;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	1cfb      	adds	r3, r7, #3
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2101      	movs	r1, #1
 8000c14:	4099      	lsls	r1, r3
 8000c16:	000b      	movs	r3, r1
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	801a      	strh	r2, [r3, #0]
		break;
 8000c22:	e00e      	b.n	8000c42 <utils_set_bit_in_Word+0x58>
	    case 0:
		*word &= ~(1UL << pos);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	1cfa      	adds	r2, r7, #3
 8000c2a:	7812      	ldrb	r2, [r2, #0]
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4091      	lsls	r1, r2
 8000c30:	000a      	movs	r2, r1
 8000c32:	b292      	uxth	r2, r2
 8000c34:	43d2      	mvns	r2, r2
 8000c36:	b292      	uxth	r2, r2
 8000c38:	4013      	ands	r3, r2
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	801a      	strh	r2, [r3, #0]
		break;
 8000c40:	46c0      	nop			; (mov r8, r8)
	    }

	}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c50:	f7ff ff16 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	; (8000c8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <LoopForever+0xe>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <LoopForever+0x16>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c7a:	f005 f85b 	bl	8005d34 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c7e:	f7ff fd3f 	bl	8000700 <main>

08000c82 <LoopForever>:

LoopForever:
  b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   r0, =_estack
 8000c84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c90:	08005eb0 	.word	0x08005eb0
  ldr r2, =_sbss
 8000c94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c98:	20001518 	.word	0x20001518

08000c9c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca6:	1dfb      	adds	r3, r7, #7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_Init+0x3c>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_Init+0x3c>)
 8000cb2:	2180      	movs	r1, #128	; 0x80
 8000cb4:	0049      	lsls	r1, r1, #1
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fe64 	bl	8000988 <HAL_InitTick>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d003      	beq.n	8000ccc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	e001      	b.n	8000cd0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe32 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	781b      	ldrb	r3, [r3, #0]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	001a      	movs	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	18d2      	adds	r2, r2, r3
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	601a      	str	r2, [r3, #0]
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200014d4 	.word	0x200014d4

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	; (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	200014d4 	.word	0x200014d4

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	0002      	movs	r2, r0
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b7f      	cmp	r3, #127	; 0x7f
 8000d2a:	d809      	bhi.n	8000d40 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	001a      	movs	r2, r3
 8000d32:	231f      	movs	r3, #31
 8000d34:	401a      	ands	r2, r3
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_EnableIRQ+0x30>)
 8000d38:	2101      	movs	r1, #1
 8000d3a:	4091      	lsls	r1, r2
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b002      	add	sp, #8
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d60:	d828      	bhi.n	8000db4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <__NVIC_SetPriority+0xd4>)
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	33c0      	adds	r3, #192	; 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	589b      	ldr	r3, [r3, r2]
 8000d72:	1dfa      	adds	r2, r7, #7
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	0011      	movs	r1, r2
 8000d78:	2203      	movs	r2, #3
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	00d2      	lsls	r2, r2, #3
 8000d7e:	21ff      	movs	r1, #255	; 0xff
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	401a      	ands	r2, r3
 8000d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	22ff      	movs	r2, #255	; 0xff
 8000d90:	401a      	ands	r2, r3
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	2303      	movs	r3, #3
 8000d9a:	4003      	ands	r3, r0
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	481f      	ldr	r0, [pc, #124]	; (8000e20 <__NVIC_SetPriority+0xd4>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	430a      	orrs	r2, r1
 8000dac:	33c0      	adds	r3, #192	; 0xc0
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000db2:	e031      	b.n	8000e18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <__NVIC_SetPriority+0xd8>)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0019      	movs	r1, r3
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	3b08      	subs	r3, #8
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3306      	adds	r3, #6
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	3304      	adds	r3, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1dfa      	adds	r2, r7, #7
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	21ff      	movs	r1, #255	; 0xff
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	401a      	ands	r2, r3
 8000de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	401a      	ands	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0018      	movs	r0, r3
 8000df4:	2303      	movs	r3, #3
 8000df6:	4003      	ands	r3, r0
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <__NVIC_SetPriority+0xd8>)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001c      	movs	r4, r3
 8000e04:	230f      	movs	r3, #15
 8000e06:	4023      	ands	r3, r4
 8000e08:	3b08      	subs	r3, #8
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	3306      	adds	r3, #6
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	18c3      	adds	r3, r0, r3
 8000e14:	3304      	adds	r3, #4
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	210f      	movs	r1, #15
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	1c02      	adds	r2, r0, #0
 8000e38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	0011      	movs	r1, r2
 8000e44:	0018      	movs	r0, r3
 8000e46:	f7ff ff81 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	0002      	movs	r2, r0
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff ff57 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b002      	add	sp, #8
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2225      	movs	r2, #37	; 0x25
 8000e88:	5c9b      	ldrb	r3, [r3, r2]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2204      	movs	r2, #4
 8000e94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e96:	230f      	movs	r3, #15
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e049      	b.n	8000f34 <HAL_DMA_Abort_IT+0xc0>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	210e      	movs	r1, #14
 8000eac:	438a      	bics	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2101      	movs	r1, #1
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	491e      	ldr	r1, [pc, #120]	; (8000f44 <HAL_DMA_Abort_IT+0xd0>)
 8000ecc:	400a      	ands	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_DMA_Abort_IT+0xd4>)
 8000ed2:	6859      	ldr	r1, [r3, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	221c      	movs	r2, #28
 8000eda:	4013      	ands	r3, r2
 8000edc:	2201      	movs	r2, #1
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_DMA_Abort_IT+0xd4>)
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000eee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d00c      	beq.n	8000f12 <HAL_DMA_Abort_IT+0x9e>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f02:	4910      	ldr	r1, [pc, #64]	; (8000f44 <HAL_DMA_Abort_IT+0xd0>)
 8000f04:	400a      	ands	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f10:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2225      	movs	r2, #37	; 0x25
 8000f16:	2101      	movs	r1, #1
 8000f18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2224      	movs	r2, #36	; 0x24
 8000f1e:	2100      	movs	r1, #0
 8000f20:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d004      	beq.n	8000f34 <HAL_DMA_Abort_IT+0xc0>
    {
      hdma->XferAbortCallback(hdma);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	0010      	movs	r0, r2
 8000f32:	4798      	blx	r3
    }
  }
  return status;
 8000f34:	230f      	movs	r3, #15
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781b      	ldrb	r3, [r3, #0]
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	fffffeff 	.word	0xfffffeff
 8000f48:	40020000 	.word	0x40020000

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	e147      	b.n	80011ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4091      	lsls	r1, r2
 8000f66:	000a      	movs	r2, r1
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <HAL_GPIO_Init+0x28>
 8000f72:	e138      	b.n	80011e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d00b      	beq.n	8000f94 <HAL_GPIO_Init+0x48>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f88:	2b11      	cmp	r3, #17
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b12      	cmp	r3, #18
 8000f92:	d130      	bne.n	8000ff6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	0013      	movs	r3, r2
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	43da      	mvns	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0xea>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b12      	cmp	r3, #18
 8001034:	d123      	bne.n	800107e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	58d3      	ldr	r3, [r2, r3]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2207      	movs	r2, #7
 8001048:	4013      	ands	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2107      	movs	r1, #7
 8001062:	400b      	ands	r3, r1
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	6939      	ldr	r1, [r7, #16]
 800107c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2203      	movs	r2, #3
 800109c:	401a      	ands	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	055b      	lsls	r3, r3, #21
 80010ba:	4013      	ands	r3, r2
 80010bc:	d100      	bne.n	80010c0 <HAL_GPIO_Init+0x174>
 80010be:	e092      	b.n	80011e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	089b      	lsrs	r3, r3, #2
 80010c6:	3318      	adds	r3, #24
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	589b      	ldr	r3, [r3, r2]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	2203      	movs	r2, #3
 80010d2:	4013      	ands	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	220f      	movs	r2, #15
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	23a0      	movs	r3, #160	; 0xa0
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x1ca>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a45      	ldr	r2, [pc, #276]	; (8001208 <HAL_GPIO_Init+0x2bc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x1c6>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a44      	ldr	r2, [pc, #272]	; (800120c <HAL_GPIO_Init+0x2c0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x1c2>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a43      	ldr	r2, [pc, #268]	; (8001210 <HAL_GPIO_Init+0x2c4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x1be>
 8001106:	2303      	movs	r3, #3
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x1cc>
 800110a:	2305      	movs	r3, #5
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x1cc>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x1cc>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x1cc>
 8001116:	2300      	movs	r3, #0
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	2103      	movs	r1, #3
 800111c:	400a      	ands	r2, r1
 800111e:	00d2      	lsls	r2, r2, #3
 8001120:	4093      	lsls	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001128:	4936      	ldr	r1, [pc, #216]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3318      	adds	r3, #24
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001136:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	58d3      	ldr	r3, [r2, r3]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	43da      	mvns	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	025b      	lsls	r3, r3, #9
 8001150:	4013      	ands	r3, r2
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800115c:	4929      	ldr	r1, [pc, #164]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 8001166:	2384      	movs	r3, #132	; 0x84
 8001168:	58d3      	ldr	r3, [r2, r3]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	029b      	lsls	r3, r3, #10
 800117e:	4013      	ands	r3, r2
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800118a:	491e      	ldr	r1, [pc, #120]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 800118c:	2284      	movs	r2, #132	; 0x84
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	035b      	lsls	r3, r3, #13
 80011aa:	4013      	ands	r3, r2
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43da      	mvns	r2, r3
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	039b      	lsls	r3, r3, #14
 80011d4:	4013      	ands	r3, r2
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	40da      	lsrs	r2, r3
 80011f4:	1e13      	subs	r3, r2, #0
 80011f6:	d000      	beq.n	80011fa <HAL_GPIO_Init+0x2ae>
 80011f8:	e6b0      	b.n	8000f5c <HAL_GPIO_Init+0x10>
  }
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b006      	add	sp, #24
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	40021800 	.word	0x40021800
 8001208:	50000400 	.word	0x50000400
 800120c:	50000800 	.word	0x50000800
 8001210:	50000c00 	.word	0x50000c00

08001214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	0008      	movs	r0, r1
 800121e:	0011      	movs	r1, r2
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	1c02      	adds	r2, r0, #0
 8001224:	801a      	strh	r2, [r3, #0]
 8001226:	1c7b      	adds	r3, r7, #1
 8001228:	1c0a      	adds	r2, r1, #0
 800122a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800122c:	1c7b      	adds	r3, r7, #1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d004      	beq.n	800123e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001234:	1cbb      	adds	r3, r7, #2
 8001236:	881a      	ldrh	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800123e:	1cbb      	adds	r3, r7, #2
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800125e:	4013      	ands	r3, r2
 8001260:	0019      	movs	r1, r3
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	429a      	cmp	r2, r3
 8001272:	d11f      	bne.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	0013      	movs	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	189b      	adds	r3, r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4912      	ldr	r1, [pc, #72]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001282:	0018      	movs	r0, r3
 8001284:	f7fe ff40 	bl	8000108 <__udivsi3>
 8001288:	0003      	movs	r3, r0
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800128e:	e008      	b.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3b01      	subs	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e001      	b.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e009      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012a4:	695a      	ldr	r2, [r3, #20]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	401a      	ands	r2, r3
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d0ed      	beq.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b004      	add	sp, #16
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	40007000 	.word	0x40007000
 80012c4:	fffff9ff 	.word	0xfffff9ff
 80012c8:	20000000 	.word	0x20000000
 80012cc:	000f4240 	.word	0x000f4240

080012d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	23e0      	movs	r3, #224	; 0xe0
 80012da:	01db      	lsls	r3, r3, #7
 80012dc:	4013      	ands	r3, r2
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e304      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	4013      	ands	r3, r2
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0x1e>
 8001304:	e07c      	b.n	8001400 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001306:	4bc3      	ldr	r3, [pc, #780]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2238      	movs	r2, #56	; 0x38
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001310:	4bc0      	ldr	r3, [pc, #768]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2203      	movs	r2, #3
 8001316:	4013      	ands	r3, r2
 8001318:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	2b10      	cmp	r3, #16
 800131e:	d102      	bne.n	8001326 <HAL_RCC_OscConfig+0x3e>
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d002      	beq.n	800132c <HAL_RCC_OscConfig+0x44>
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b08      	cmp	r3, #8
 800132a:	d10b      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	4bb9      	ldr	r3, [pc, #740]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	029b      	lsls	r3, r3, #10
 8001334:	4013      	ands	r3, r2
 8001336:	d062      	beq.n	80013fe <HAL_RCC_OscConfig+0x116>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d15e      	bne.n	80013fe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e2df      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	025b      	lsls	r3, r3, #9
 800134c:	429a      	cmp	r2, r3
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x78>
 8001350:	4bb0      	ldr	r3, [pc, #704]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4baf      	ldr	r3, [pc, #700]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	0249      	lsls	r1, r1, #9
 800135a:	430a      	orrs	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e020      	b.n	80013a2 <HAL_RCC_OscConfig+0xba>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	23a0      	movs	r3, #160	; 0xa0
 8001366:	02db      	lsls	r3, r3, #11
 8001368:	429a      	cmp	r2, r3
 800136a:	d10e      	bne.n	800138a <HAL_RCC_OscConfig+0xa2>
 800136c:	4ba9      	ldr	r3, [pc, #676]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4ba8      	ldr	r3, [pc, #672]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	02c9      	lsls	r1, r1, #11
 8001376:	430a      	orrs	r2, r1
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	4ba6      	ldr	r3, [pc, #664]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4ba5      	ldr	r3, [pc, #660]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	0249      	lsls	r1, r1, #9
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e00b      	b.n	80013a2 <HAL_RCC_OscConfig+0xba>
 800138a:	4ba2      	ldr	r3, [pc, #648]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4ba1      	ldr	r3, [pc, #644]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001390:	49a1      	ldr	r1, [pc, #644]	; (8001618 <HAL_RCC_OscConfig+0x330>)
 8001392:	400a      	ands	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	4b9f      	ldr	r3, [pc, #636]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b9e      	ldr	r3, [pc, #632]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800139c:	499f      	ldr	r1, [pc, #636]	; (800161c <HAL_RCC_OscConfig+0x334>)
 800139e:	400a      	ands	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d014      	beq.n	80013d4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fcab 	bl	8000d04 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fca6 	bl	8000d04 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e29e      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c6:	4b93      	ldr	r3, [pc, #588]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	2380      	movs	r3, #128	; 0x80
 80013cc:	029b      	lsls	r3, r3, #10
 80013ce:	4013      	ands	r3, r2
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xcc>
 80013d2:	e015      	b.n	8001400 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc96 	bl	8000d04 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013de:	f7ff fc91 	bl	8000d04 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	; 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e289      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f0:	4b88      	ldr	r3, [pc, #544]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	029b      	lsls	r3, r3, #10
 80013f8:	4013      	ands	r3, r2
 80013fa:	d1f0      	bne.n	80013de <HAL_RCC_OscConfig+0xf6>
 80013fc:	e000      	b.n	8001400 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2202      	movs	r2, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d100      	bne.n	800140c <HAL_RCC_OscConfig+0x124>
 800140a:	e099      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140c:	4b81      	ldr	r3, [pc, #516]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2238      	movs	r2, #56	; 0x38
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001416:	4b7f      	ldr	r3, [pc, #508]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2203      	movs	r2, #3
 800141c:	4013      	ands	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d102      	bne.n	800142c <HAL_RCC_OscConfig+0x144>
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d002      	beq.n	8001432 <HAL_RCC_OscConfig+0x14a>
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d135      	bne.n	800149e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001432:	4b78      	ldr	r3, [pc, #480]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4013      	ands	r3, r2
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x162>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e25c      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b72      	ldr	r3, [pc, #456]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a74      	ldr	r2, [pc, #464]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	021a      	lsls	r2, r3, #8
 800145a:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800145c:	430a      	orrs	r2, r1
 800145e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d112      	bne.n	800148c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001466:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6e      	ldr	r2, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 800146c:	4013      	ands	r3, r2
 800146e:	0019      	movs	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800147a:	4b66      	ldr	r3, [pc, #408]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	0adb      	lsrs	r3, r3, #11
 8001480:	2207      	movs	r2, #7
 8001482:	4013      	ands	r3, r2
 8001484:	4a68      	ldr	r2, [pc, #416]	; (8001628 <HAL_RCC_OscConfig+0x340>)
 8001486:	40da      	lsrs	r2, r3
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x344>)
 800148a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x348>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff fa79 	bl	8000988 <HAL_InitTick>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d051      	beq.n	800153e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e232      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d030      	beq.n	8001508 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014a6:	4b5b      	ldr	r3, [pc, #364]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x33c>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	0019      	movs	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	4b57      	ldr	r3, [pc, #348]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014ba:	4b56      	ldr	r3, [pc, #344]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b55      	ldr	r3, [pc, #340]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	0049      	lsls	r1, r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc1c 	bl	8000d04 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc17 	bl	8000d04 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e20f      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e4:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b48      	ldr	r3, [pc, #288]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4a4a      	ldr	r2, [pc, #296]	; (8001620 <HAL_RCC_OscConfig+0x338>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	021a      	lsls	r2, r3, #8
 8001500:	4b44      	ldr	r3, [pc, #272]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	e01b      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001508:	4b42      	ldr	r3, [pc, #264]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800150e:	4949      	ldr	r1, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0x34c>)
 8001510:	400a      	ands	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fbf6 	bl	8000d04 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fbf1 	bl	8000d04 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1e9      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4013      	ands	r3, r2
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x236>
 800153c:	e000      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2208      	movs	r2, #8
 8001546:	4013      	ands	r3, r2
 8001548:	d047      	beq.n	80015da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800154a:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2238      	movs	r2, #56	; 0x38
 8001550:	4013      	ands	r3, r2
 8001552:	2b18      	cmp	r3, #24
 8001554:	d10a      	bne.n	800156c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001556:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d03c      	beq.n	80015da <HAL_RCC_OscConfig+0x2f2>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d138      	bne.n	80015da <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e1cb      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d019      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 8001576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800157a:	2101      	movs	r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fbc0 	bl	8000d04 <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fbbb 	bl	8000d04 <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1b3      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a0:	2202      	movs	r2, #2
 80015a2:	4013      	ands	r3, r2
 80015a4:	d0f1      	beq.n	800158a <HAL_RCC_OscConfig+0x2a2>
 80015a6:	e018      	b.n	80015da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	438a      	bics	r2, r1
 80015b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fba6 	bl	8000d04 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fba1 	bl	8000d04 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e199      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d4:	2202      	movs	r2, #2
 80015d6:	4013      	ands	r3, r2
 80015d8:	d1f1      	bne.n	80015be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2204      	movs	r2, #4
 80015e0:	4013      	ands	r3, r2
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2fe>
 80015e4:	e0c6      	b.n	8001774 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e6:	231f      	movs	r3, #31
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2238      	movs	r2, #56	; 0x38
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	d11e      	bne.n	8001638 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_OscConfig+0x32c>)
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2202      	movs	r2, #2
 8001600:	4013      	ands	r3, r2
 8001602:	d100      	bne.n	8001606 <HAL_RCC_OscConfig+0x31e>
 8001604:	e0b6      	b.n	8001774 <HAL_RCC_OscConfig+0x48c>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d000      	beq.n	8001610 <HAL_RCC_OscConfig+0x328>
 800160e:	e0b1      	b.n	8001774 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e177      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
 8001614:	40021000 	.word	0x40021000
 8001618:	fffeffff 	.word	0xfffeffff
 800161c:	fffbffff 	.word	0xfffbffff
 8001620:	ffff80ff 	.word	0xffff80ff
 8001624:	ffffc7ff 	.word	0xffffc7ff
 8001628:	00f42400 	.word	0x00f42400
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004
 8001634:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001638:	4bb4      	ldr	r3, [pc, #720]	; (800190c <HAL_RCC_OscConfig+0x624>)
 800163a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	055b      	lsls	r3, r3, #21
 8001640:	4013      	ands	r3, r2
 8001642:	d101      	bne.n	8001648 <HAL_RCC_OscConfig+0x360>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x362>
 8001648:	2300      	movs	r3, #0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d011      	beq.n	8001672 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4baf      	ldr	r3, [pc, #700]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001652:	4bae      	ldr	r3, [pc, #696]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	0549      	lsls	r1, r1, #21
 8001658:	430a      	orrs	r2, r1
 800165a:	63da      	str	r2, [r3, #60]	; 0x3c
 800165c:	4bab      	ldr	r3, [pc, #684]	; (800190c <HAL_RCC_OscConfig+0x624>)
 800165e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	055b      	lsls	r3, r3, #21
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800166a:	231f      	movs	r3, #31
 800166c:	18fb      	adds	r3, r7, r3
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001672:	4ba7      	ldr	r3, [pc, #668]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4013      	ands	r3, r2
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800167e:	4ba4      	ldr	r3, [pc, #656]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4ba3      	ldr	r3, [pc, #652]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0049      	lsls	r1, r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800168c:	f7ff fb3a 	bl	8000d04 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff fb35 	bl	8000d04 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e12d      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a8:	4b99      	ldr	r3, [pc, #612]	; (8001910 <HAL_RCC_OscConfig+0x628>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d106      	bne.n	80016ca <HAL_RCC_OscConfig+0x3e2>
 80016bc:	4b93      	ldr	r3, [pc, #588]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c0:	4b92      	ldr	r3, [pc, #584]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	430a      	orrs	r2, r1
 80016c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016c8:	e01c      	b.n	8001704 <HAL_RCC_OscConfig+0x41c>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d10c      	bne.n	80016ec <HAL_RCC_OscConfig+0x404>
 80016d2:	4b8e      	ldr	r3, [pc, #568]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016d6:	4b8d      	ldr	r3, [pc, #564]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016d8:	2104      	movs	r1, #4
 80016da:	430a      	orrs	r2, r1
 80016dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016de:	4b8b      	ldr	r3, [pc, #556]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016e2:	4b8a      	ldr	r3, [pc, #552]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80016ea:	e00b      	b.n	8001704 <HAL_RCC_OscConfig+0x41c>
 80016ec:	4b87      	ldr	r3, [pc, #540]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f0:	4b86      	ldr	r3, [pc, #536]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016f2:	2101      	movs	r1, #1
 80016f4:	438a      	bics	r2, r1
 80016f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016f8:	4b84      	ldr	r3, [pc, #528]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016fc:	4b83      	ldr	r3, [pc, #524]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80016fe:	2104      	movs	r1, #4
 8001700:	438a      	bics	r2, r1
 8001702:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d014      	beq.n	8001736 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fafa 	bl	8000d04 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001714:	e009      	b.n	800172a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001716:	f7ff faf5 	bl	8000d04 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	4a7c      	ldr	r2, [pc, #496]	; (8001914 <HAL_RCC_OscConfig+0x62c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0ec      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172a:	4b78      	ldr	r3, [pc, #480]	; (800190c <HAL_RCC_OscConfig+0x624>)
 800172c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x42e>
 8001734:	e013      	b.n	800175e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001736:	f7ff fae5 	bl	8000d04 <HAL_GetTick>
 800173a:	0003      	movs	r3, r0
 800173c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173e:	e009      	b.n	8001754 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001740:	f7ff fae0 	bl	8000d04 <HAL_GetTick>
 8001744:	0002      	movs	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	4a72      	ldr	r2, [pc, #456]	; (8001914 <HAL_RCC_OscConfig+0x62c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0d7      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001754:	4b6d      	ldr	r3, [pc, #436]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800175e:	231f      	movs	r3, #31
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d105      	bne.n	8001774 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001768:	4b68      	ldr	r3, [pc, #416]	; (800190c <HAL_RCC_OscConfig+0x624>)
 800176a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800176c:	4b67      	ldr	r3, [pc, #412]	; (800190c <HAL_RCC_OscConfig+0x624>)
 800176e:	496a      	ldr	r1, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x630>)
 8001770:	400a      	ands	r2, r1
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d100      	bne.n	800177e <HAL_RCC_OscConfig+0x496>
 800177c:	e0c1      	b.n	8001902 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2238      	movs	r2, #56	; 0x38
 8001784:	4013      	ands	r3, r2
 8001786:	2b10      	cmp	r3, #16
 8001788:	d100      	bne.n	800178c <HAL_RCC_OscConfig+0x4a4>
 800178a:	e081      	b.n	8001890 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d156      	bne.n	8001842 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001794:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b5c      	ldr	r3, [pc, #368]	; (800190c <HAL_RCC_OscConfig+0x624>)
 800179a:	4960      	ldr	r1, [pc, #384]	; (800191c <HAL_RCC_OscConfig+0x634>)
 800179c:	400a      	ands	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff fab0 	bl	8000d04 <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017aa:	f7ff faab 	bl	8000d04 <HAL_GetTick>
 80017ae:	0002      	movs	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e0a3      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	049b      	lsls	r3, r3, #18
 80017c4:	4013      	ands	r3, r2
 80017c6:	d1f0      	bne.n	80017aa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a54      	ldr	r2, [pc, #336]	; (8001920 <HAL_RCC_OscConfig+0x638>)
 80017ce:	4013      	ands	r3, r2
 80017d0:	0019      	movs	r1, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1a      	ldr	r2, [r3, #32]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	431a      	orrs	r2, r3
 80017f6:	4b45      	ldr	r3, [pc, #276]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x624>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b42      	ldr	r3, [pc, #264]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	0449      	lsls	r1, r1, #17
 8001806:	430a      	orrs	r2, r1
 8001808:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800180a:	4b40      	ldr	r3, [pc, #256]	; (800190c <HAL_RCC_OscConfig+0x624>)
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	0549      	lsls	r1, r1, #21
 8001814:	430a      	orrs	r2, r1
 8001816:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fa74 	bl	8000d04 <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7ff fa6f 	bl	8000d04 <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e067      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	049b      	lsls	r3, r3, #18
 800183c:	4013      	ands	r3, r2
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x53a>
 8001840:	e05f      	b.n	8001902 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001842:	4b32      	ldr	r3, [pc, #200]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001848:	4934      	ldr	r1, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x634>)
 800184a:	400a      	ands	r2, r1
 800184c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001854:	2103      	movs	r1, #3
 8001856:	438a      	bics	r2, r1
 8001858:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_RCC_OscConfig+0x624>)
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001860:	4930      	ldr	r1, [pc, #192]	; (8001924 <HAL_RCC_OscConfig+0x63c>)
 8001862:	400a      	ands	r2, r1
 8001864:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fa4d 	bl	8000d04 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fa48 	bl	8000d04 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e040      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_RCC_OscConfig+0x624>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	049b      	lsls	r3, r3, #18
 800188a:	4013      	ands	r3, r2
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x588>
 800188e:	e038      	b.n	8001902 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e033      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_RCC_OscConfig+0x624>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2203      	movs	r2, #3
 80018a6:	401a      	ands	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d126      	bne.n	80018fe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2270      	movs	r2, #112	; 0x70
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11f      	bne.n	80018fe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	23fe      	movs	r3, #254	; 0xfe
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	401a      	ands	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d116      	bne.n	80018fe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	23f8      	movs	r3, #248	; 0xf8
 80018d4:	039b      	lsls	r3, r3, #14
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d10e      	bne.n	80018fe <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	23e0      	movs	r3, #224	; 0xe0
 80018e4:	051b      	lsls	r3, r3, #20
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	0f5b      	lsrs	r3, r3, #29
 80018f4:	075a      	lsls	r2, r3, #29
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d001      	beq.n	8001902 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b008      	add	sp, #32
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	40007000 	.word	0x40007000
 8001914:	00001388 	.word	0x00001388
 8001918:	efffffff 	.word	0xefffffff
 800191c:	feffffff 	.word	0xfeffffff
 8001920:	11c1808c 	.word	0x11c1808c
 8001924:	eefeffff 	.word	0xeefeffff

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0e9      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b76      	ldr	r3, [pc, #472]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2207      	movs	r2, #7
 8001942:	4013      	ands	r3, r2
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d91e      	bls.n	8001988 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2207      	movs	r2, #7
 8001950:	4393      	bics	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800195c:	f7ff f9d2 	bl	8000d04 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001964:	e009      	b.n	800197a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001966:	f7ff f9cd 	bl	8000d04 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	4a6a      	ldr	r2, [pc, #424]	; (8001b1c <HAL_RCC_ClockConfig+0x1f4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e0ca      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2207      	movs	r2, #7
 8001980:	4013      	ands	r3, r2
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d015      	beq.n	80019be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2204      	movs	r2, #4
 8001998:	4013      	ands	r3, r2
 800199a:	d006      	beq.n	80019aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800199c:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019a2:	21e0      	movs	r1, #224	; 0xe0
 80019a4:	01c9      	lsls	r1, r1, #7
 80019a6:	430a      	orrs	r2, r1
 80019a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4a5d      	ldr	r2, [pc, #372]	; (8001b24 <HAL_RCC_ClockConfig+0x1fc>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d057      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	d12b      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e097      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e8:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	049b      	lsls	r3, r3, #18
 80019f0:	4013      	ands	r3, r2
 80019f2:	d11f      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e08b      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d113      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e07f      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d108      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e074      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a26:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e06d      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2207      	movs	r2, #7
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a48:	f7ff f95c 	bl	8000d04 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a52:	f7ff f957 	bl	8000d04 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	4a2f      	ldr	r2, [pc, #188]	; (8001b1c <HAL_RCC_ClockConfig+0x1f4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e054      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2238      	movs	r2, #56	; 0x38
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1ec      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	4013      	ands	r3, r2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d21e      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a98:	f7ff f934 	bl	8000d04 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa2:	f7ff f92f 	bl	8000d04 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_RCC_ClockConfig+0x1f4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e02c      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2207      	movs	r2, #7
 8001abc:	4013      	ands	r3, r2
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4013      	ands	r3, r2
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_RCC_ClockConfig+0x200>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ae2:	f000 f829 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001ae6:	0001      	movs	r1, r0
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	220f      	movs	r2, #15
 8001af0:	401a      	ands	r2, r3
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_RCC_ClockConfig+0x204>)
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	58d3      	ldr	r3, [r2, r3]
 8001af8:	221f      	movs	r2, #31
 8001afa:	4013      	ands	r3, r2
 8001afc:	000a      	movs	r2, r1
 8001afe:	40da      	lsrs	r2, r3
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_ClockConfig+0x208>)
 8001b02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x20c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7fe ff3d 	bl	8000988 <HAL_InitTick>
 8001b0e:	0003      	movs	r3, r0
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b004      	add	sp, #16
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	00001388 	.word	0x00001388
 8001b20:	40021000 	.word	0x40021000
 8001b24:	fffff0ff 	.word	0xfffff0ff
 8001b28:	ffff8fff 	.word	0xffff8fff
 8001b2c:	08005e00 	.word	0x08005e00
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2238      	movs	r2, #56	; 0x38
 8001b44:	4013      	ands	r3, r2
 8001b46:	d10f      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0adb      	lsrs	r3, r3, #11
 8001b4e:	2207      	movs	r2, #7
 8001b50:	4013      	ands	r3, r2
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	0013      	movs	r3, r2
 8001b58:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	4835      	ldr	r0, [pc, #212]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b5e:	f7fe fad3 	bl	8000108 <__udivsi3>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	e05d      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b68:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2238      	movs	r2, #56	; 0x38
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e054      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2238      	movs	r2, #56	; 0x38
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d138      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	2207      	movs	r2, #7
 8001b98:	4013      	ands	r3, r2
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	4824      	ldr	r0, [pc, #144]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ba8:	f7fe faae 	bl	8000108 <__udivsi3>
 8001bac:	0003      	movs	r3, r0
 8001bae:	0019      	movs	r1, r3
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	227f      	movs	r2, #127	; 0x7f
 8001bb8:	4013      	ands	r3, r2
 8001bba:	434b      	muls	r3, r1
 8001bbc:	617b      	str	r3, [r7, #20]
        break;
 8001bbe:	e00d      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	481c      	ldr	r0, [pc, #112]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bc4:	f7fe faa0 	bl	8000108 <__udivsi3>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	227f      	movs	r2, #127	; 0x7f
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	434b      	muls	r3, r1
 8001bd8:	617b      	str	r3, [r7, #20]
        break;
 8001bda:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0f5b      	lsrs	r3, r3, #29
 8001be2:	2207      	movs	r2, #7
 8001be4:	4013      	ands	r3, r2
 8001be6:	3301      	adds	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	6978      	ldr	r0, [r7, #20]
 8001bee:	f7fe fa8b 	bl	8000108 <__udivsi3>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e015      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2238      	movs	r2, #56	; 0x38
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d103      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2238      	movs	r2, #56	; 0x38
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b18      	cmp	r3, #24
 8001c16:	d103      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c18:	23fa      	movs	r3, #250	; 0xfa
 8001c1a:	01db      	lsls	r3, r3, #7
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e001      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c24:	693b      	ldr	r3, [r7, #16]
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b006      	add	sp, #24
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	40021000 	.word	0x40021000
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	20000000 	.word	0x20000000

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c54:	f7ff fff2 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c58:	0004      	movs	r4, r0
 8001c5a:	f7ff fb39 	bl	80012d0 <LL_RCC_GetAPB1Prescaler>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	0b1a      	lsrs	r2, r3, #12
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c64:	0092      	lsls	r2, r2, #2
 8001c66:	58d3      	ldr	r3, [r2, r3]
 8001c68:	221f      	movs	r2, #31
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	40dc      	lsrs	r4, r3
 8001c6e:	0023      	movs	r3, r4
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	08005e40 	.word	0x08005e40

08001c7c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_RCC_GetClockConfig+0x4c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2207      	movs	r2, #7
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_GetClockConfig+0x4c>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	23f0      	movs	r3, #240	; 0xf0
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_RCC_GetClockConfig+0x4c>)
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	23e0      	movs	r3, #224	; 0xe0
 8001cac:	01db      	lsls	r3, r3, #7
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_GetClockConfig+0x50>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2207      	movs	r2, #7
 8001cba:	401a      	ands	r2, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	601a      	str	r2, [r3, #0]
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b002      	add	sp, #8
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0a8      	b.n	8001e34 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	2382      	movs	r3, #130	; 0x82
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d009      	beq.n	8001d0a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61da      	str	r2, [r3, #28]
 8001cfc:	e005      	b.n	8001d0a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	225d      	movs	r2, #93	; 0x5d
 8001d14:	5c9b      	ldrb	r3, [r3, r2]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	225c      	movs	r2, #92	; 0x5c
 8001d20:	2100      	movs	r1, #0
 8001d22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7fe fdb0 	bl	800088c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	225d      	movs	r2, #93	; 0x5d
 8001d30:	2102      	movs	r1, #2
 8001d32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2140      	movs	r1, #64	; 0x40
 8001d40:	438a      	bics	r2, r1
 8001d42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	23e0      	movs	r3, #224	; 0xe0
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d902      	bls.n	8001d56 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	e002      	b.n	8001d5c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	015b      	lsls	r3, r3, #5
 8001d5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	23f0      	movs	r3, #240	; 0xf0
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d008      	beq.n	8001d7a <HAL_SPI_Init+0xaa>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	23e0      	movs	r3, #224	; 0xe0
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d002      	beq.n	8001d7a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	2382      	movs	r3, #130	; 0x82
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	401a      	ands	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6899      	ldr	r1, [r3, #8]
 8001d88:	2384      	movs	r3, #132	; 0x84
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	400b      	ands	r3, r1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2102      	movs	r1, #2
 8001d96:	400b      	ands	r3, r1
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	695b      	ldr	r3, [r3, #20]
 8001d9e:	2101      	movs	r1, #1
 8001da0:	400b      	ands	r3, r1
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6999      	ldr	r1, [r3, #24]
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	400b      	ands	r3, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2138      	movs	r1, #56	; 0x38
 8001db6:	400b      	ands	r3, r1
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	0011      	movs	r1, r2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dca:	2380      	movs	r3, #128	; 0x80
 8001dcc:	019b      	lsls	r3, r3, #6
 8001dce:	401a      	ands	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	0c1b      	lsrs	r3, r3, #16
 8001dde:	2204      	movs	r2, #4
 8001de0:	401a      	ands	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	2110      	movs	r1, #16
 8001de8:	400b      	ands	r3, r1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	2108      	movs	r1, #8
 8001df2:	400b      	ands	r3, r1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68d9      	ldr	r1, [r3, #12]
 8001dfa:	23f0      	movs	r3, #240	; 0xf0
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	400b      	ands	r3, r1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	0011      	movs	r1, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	015b      	lsls	r3, r3, #5
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4907      	ldr	r1, [pc, #28]	; (8001e3c <HAL_SPI_Init+0x16c>)
 8001e20:	400a      	ands	r2, r1
 8001e22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	225d      	movs	r2, #93	; 0x5d
 8001e2e:	2101      	movs	r1, #1
 8001e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b004      	add	sp, #16
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	fffff7ff 	.word	0xfffff7ff

08001e40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	1dbb      	adds	r3, r7, #6
 8001e4e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e50:	231f      	movs	r3, #31
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	225c      	movs	r2, #92	; 0x5c
 8001e5c:	5c9b      	ldrb	r3, [r3, r2]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_SPI_Transmit+0x26>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e140      	b.n	80020e8 <HAL_SPI_Transmit+0x2a8>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	225c      	movs	r2, #92	; 0x5c
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e6e:	f7fe ff49 	bl	8000d04 <HAL_GetTick>
 8001e72:	0003      	movs	r3, r0
 8001e74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001e76:	2316      	movs	r3, #22
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	1dba      	adds	r2, r7, #6
 8001e7c:	8812      	ldrh	r2, [r2, #0]
 8001e7e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	225d      	movs	r2, #93	; 0x5d
 8001e84:	5c9b      	ldrb	r3, [r3, r2]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d004      	beq.n	8001e96 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001e8c:	231f      	movs	r3, #31
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	2202      	movs	r2, #2
 8001e92:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e94:	e11d      	b.n	80020d2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_SPI_Transmit+0x64>
 8001e9c:	1dbb      	adds	r3, r7, #6
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d104      	bne.n	8001eae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001ea4:	231f      	movs	r3, #31
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
    goto error;
 8001eac:	e111      	b.n	80020d2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	225d      	movs	r2, #93	; 0x5d
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1dba      	adds	r2, r7, #6
 8001ec6:	8812      	ldrh	r2, [r2, #0]
 8001ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1dba      	adds	r2, r7, #6
 8001ece:	8812      	ldrh	r2, [r2, #0]
 8001ed0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2244      	movs	r2, #68	; 0x44
 8001edc:	2100      	movs	r1, #0
 8001ede:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2246      	movs	r2, #70	; 0x46
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d110      	bne.n	8001f22 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2140      	movs	r1, #64	; 0x40
 8001f0c:	438a      	bics	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	01c9      	lsls	r1, r1, #7
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2240      	movs	r2, #64	; 0x40
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b40      	cmp	r3, #64	; 0x40
 8001f2e:	d007      	beq.n	8001f40 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2140      	movs	r1, #64	; 0x40
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	23e0      	movs	r3, #224	; 0xe0
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d94e      	bls.n	8001fea <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_SPI_Transmit+0x11e>
 8001f54:	2316      	movs	r3, #22
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d13f      	bne.n	8001fde <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	881a      	ldrh	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	1c9a      	adds	r2, r3, #2
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f82:	e02c      	b.n	8001fde <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d112      	bne.n	8001fb8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	1c9a      	adds	r2, r3, #2
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fb6:	e012      	b.n	8001fde <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fb8:	f7fe fea4 	bl	8000d04 <HAL_GetTick>
 8001fbc:	0002      	movs	r2, r0
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d802      	bhi.n	8001fce <HAL_SPI_Transmit+0x18e>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	d102      	bne.n	8001fd4 <HAL_SPI_Transmit+0x194>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d104      	bne.n	8001fde <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001fd4:	231f      	movs	r3, #31
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2203      	movs	r2, #3
 8001fda:	701a      	strb	r2, [r3, #0]
          goto error;
 8001fdc:	e079      	b.n	80020d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1cd      	bne.n	8001f84 <HAL_SPI_Transmit+0x144>
 8001fe8:	e04f      	b.n	800208a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_SPI_Transmit+0x1bc>
 8001ff2:	2316      	movs	r3, #22
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d141      	bne.n	8002080 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	330c      	adds	r3, #12
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002022:	e02d      	b.n	8002080 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2202      	movs	r2, #2
 800202c:	4013      	ands	r3, r2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d113      	bne.n	800205a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	330c      	adds	r3, #12
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002058:	e012      	b.n	8002080 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205a:	f7fe fe53 	bl	8000d04 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d802      	bhi.n	8002070 <HAL_SPI_Transmit+0x230>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	d102      	bne.n	8002076 <HAL_SPI_Transmit+0x236>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d104      	bne.n	8002080 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002076:	231f      	movs	r3, #31
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	2203      	movs	r2, #3
 800207c:	701a      	strb	r2, [r3, #0]
          goto error;
 800207e:	e028      	b.n	80020d2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1cc      	bne.n	8002024 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	6839      	ldr	r1, [r7, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	0018      	movs	r0, r3
 8002092:	f000 fc41 	bl	8002918 <SPI_EndRxTxTransaction>
 8002096:	1e03      	subs	r3, r0, #0
 8002098:	d002      	beq.n	80020a0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2220      	movs	r2, #32
 800209e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d004      	beq.n	80020d0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80020c6:	231f      	movs	r3, #31
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e000      	b.n	80020d2 <HAL_SPI_Transmit+0x292>
  }

error:
 80020d0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	225d      	movs	r2, #93	; 0x5d
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	225c      	movs	r2, #92	; 0x5c
 80020de:	2100      	movs	r1, #0
 80020e0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80020e2:	231f      	movs	r3, #31
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	781b      	ldrb	r3, [r3, #0]
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b008      	add	sp, #32
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	001a      	movs	r2, r3
 80020fe:	1cbb      	adds	r3, r7, #2
 8002100:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002102:	2301      	movs	r3, #1
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002106:	2323      	movs	r3, #35	; 0x23
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	225c      	movs	r2, #92	; 0x5c
 8002112:	5c9b      	ldrb	r3, [r3, r2]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_SPI_TransmitReceive+0x2c>
 8002118:	2302      	movs	r3, #2
 800211a:	e1b6      	b.n	800248a <HAL_SPI_TransmitReceive+0x39a>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	225c      	movs	r2, #92	; 0x5c
 8002120:	2101      	movs	r1, #1
 8002122:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002124:	f7fe fdee 	bl	8000d04 <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800212c:	201b      	movs	r0, #27
 800212e:	183b      	adds	r3, r7, r0
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	215d      	movs	r1, #93	; 0x5d
 8002134:	5c52      	ldrb	r2, [r2, r1]
 8002136:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800213e:	2312      	movs	r3, #18
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	1cba      	adds	r2, r7, #2
 8002144:	8812      	ldrh	r2, [r2, #0]
 8002146:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002148:	183b      	adds	r3, r7, r0
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d012      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x86>
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	2382      	movs	r3, #130	; 0x82
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	429a      	cmp	r2, r3
 8002158:	d108      	bne.n	800216c <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d104      	bne.n	800216c <HAL_SPI_TransmitReceive+0x7c>
 8002162:	231b      	movs	r3, #27
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d004      	beq.n	8002176 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800216c:	2323      	movs	r3, #35	; 0x23
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2202      	movs	r2, #2
 8002172:	701a      	strb	r2, [r3, #0]
    goto error;
 8002174:	e17e      	b.n	8002474 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_SPI_TransmitReceive+0x9a>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_SPI_TransmitReceive+0x9a>
 8002182:	1cbb      	adds	r3, r7, #2
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d104      	bne.n	8002194 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800218a:	2323      	movs	r3, #35	; 0x23
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
    goto error;
 8002192:	e16f      	b.n	8002474 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	225d      	movs	r2, #93	; 0x5d
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b04      	cmp	r3, #4
 800219e:	d003      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	225d      	movs	r2, #93	; 0x5d
 80021a4:	2105      	movs	r1, #5
 80021a6:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1cba      	adds	r2, r7, #2
 80021b8:	2146      	movs	r1, #70	; 0x46
 80021ba:	8812      	ldrh	r2, [r2, #0]
 80021bc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1cba      	adds	r2, r7, #2
 80021c2:	2144      	movs	r1, #68	; 0x44
 80021c4:	8812      	ldrh	r2, [r2, #0]
 80021c6:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1cba      	adds	r2, r7, #2
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1cba      	adds	r2, r7, #2
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	23e0      	movs	r3, #224	; 0xe0
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d908      	bls.n	8002208 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	49a4      	ldr	r1, [pc, #656]	; (8002494 <HAL_SPI_TransmitReceive+0x3a4>)
 8002202:	400a      	ands	r2, r1
 8002204:	605a      	str	r2, [r3, #4]
 8002206:	e008      	b.n	800221a <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	0149      	lsls	r1, r1, #5
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2240      	movs	r2, #64	; 0x40
 8002222:	4013      	ands	r3, r2
 8002224:	2b40      	cmp	r3, #64	; 0x40
 8002226:	d007      	beq.n	8002238 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2140      	movs	r1, #64	; 0x40
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	23e0      	movs	r3, #224	; 0xe0
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	429a      	cmp	r2, r3
 8002242:	d800      	bhi.n	8002246 <HAL_SPI_TransmitReceive+0x156>
 8002244:	e07f      	b.n	8002346 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_SPI_TransmitReceive+0x16a>
 800224e:	2312      	movs	r3, #18
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d000      	beq.n	800225a <HAL_SPI_TransmitReceive+0x16a>
 8002258:	e069      	b.n	800232e <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	1c9a      	adds	r2, r3, #2
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800227e:	e056      	b.n	800232e <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2202      	movs	r2, #2
 8002288:	4013      	ands	r3, r2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d11b      	bne.n	80022c6 <HAL_SPI_TransmitReceive+0x1d6>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d016      	beq.n	80022c6 <HAL_SPI_TransmitReceive+0x1d6>
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	2b01      	cmp	r3, #1
 800229c:	d113      	bne.n	80022c6 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	881a      	ldrh	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ae:	1c9a      	adds	r2, r3, #2
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2201      	movs	r2, #1
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d11c      	bne.n	800230e <HAL_SPI_TransmitReceive+0x21e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2246      	movs	r2, #70	; 0x46
 80022d8:	5a9b      	ldrh	r3, [r3, r2]
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d016      	beq.n	800230e <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	b292      	uxth	r2, r2
 80022ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	1c9a      	adds	r2, r3, #2
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2246      	movs	r2, #70	; 0x46
 80022fc:	5a9b      	ldrh	r3, [r3, r2]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b299      	uxth	r1, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2246      	movs	r2, #70	; 0x46
 8002308:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800230a:	2301      	movs	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800230e:	f7fe fcf9 	bl	8000d04 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231a:	429a      	cmp	r2, r3
 800231c:	d807      	bhi.n	800232e <HAL_SPI_TransmitReceive+0x23e>
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	3301      	adds	r3, #1
 8002322:	d004      	beq.n	800232e <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8002324:	2323      	movs	r3, #35	; 0x23
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	2203      	movs	r2, #3
 800232a:	701a      	strb	r2, [r3, #0]
        goto error;
 800232c:	e0a2      	b.n	8002474 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002332:	b29b      	uxth	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1a3      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x190>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2246      	movs	r2, #70	; 0x46
 800233c:	5a9b      	ldrh	r3, [r3, r2]
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d19d      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x190>
 8002344:	e085      	b.n	8002452 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_SPI_TransmitReceive+0x26a>
 800234e:	2312      	movs	r3, #18
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d000      	beq.n	800235a <HAL_SPI_TransmitReceive+0x26a>
 8002358:	e070      	b.n	800243c <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	330c      	adds	r3, #12
 8002364:	7812      	ldrb	r2, [r2, #0]
 8002366:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002380:	e05c      	b.n	800243c <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	2202      	movs	r2, #2
 800238a:	4013      	ands	r3, r2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d11c      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x2da>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d017      	beq.n	80023ca <HAL_SPI_TransmitReceive+0x2da>
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	2b01      	cmp	r3, #1
 800239e:	d114      	bne.n	80023ca <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023bc:	b29b      	uxth	r3, r3
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d11e      	bne.n	8002416 <HAL_SPI_TransmitReceive+0x326>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2246      	movs	r2, #70	; 0x46
 80023dc:	5a9b      	ldrh	r3, [r3, r2]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d018      	beq.n	8002416 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	001a      	movs	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	7812      	ldrb	r2, [r2, #0]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2246      	movs	r2, #70	; 0x46
 8002404:	5a9b      	ldrh	r3, [r3, r2]
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b299      	uxth	r1, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2246      	movs	r2, #70	; 0x46
 8002410:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002412:	2301      	movs	r3, #1
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002416:	f7fe fc75 	bl	8000d04 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002422:	429a      	cmp	r2, r3
 8002424:	d802      	bhi.n	800242c <HAL_SPI_TransmitReceive+0x33c>
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	3301      	adds	r3, #1
 800242a:	d102      	bne.n	8002432 <HAL_SPI_TransmitReceive+0x342>
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	2b00      	cmp	r3, #0
 8002430:	d104      	bne.n	800243c <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8002432:	2323      	movs	r3, #35	; 0x23
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2203      	movs	r2, #3
 8002438:	701a      	strb	r2, [r3, #0]
        goto error;
 800243a:	e01b      	b.n	8002474 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d19d      	bne.n	8002382 <HAL_SPI_TransmitReceive+0x292>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2246      	movs	r2, #70	; 0x46
 800244a:	5a9b      	ldrh	r3, [r3, r2]
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d197      	bne.n	8002382 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	0018      	movs	r0, r3
 800245a:	f000 fa5d 	bl	8002918 <SPI_EndRxTxTransaction>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d007      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8002462:	2323      	movs	r3, #35	; 0x23
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2220      	movs	r2, #32
 800246e:	661a      	str	r2, [r3, #96]	; 0x60
 8002470:	e000      	b.n	8002474 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8002472:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	225d      	movs	r2, #93	; 0x5d
 8002478:	2101      	movs	r1, #1
 800247a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	225c      	movs	r2, #92	; 0x5c
 8002480:	2100      	movs	r1, #0
 8002482:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002484:	2323      	movs	r3, #35	; 0x23
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b00a      	add	sp, #40	; 0x28
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	ffffefff 	.word	0xffffefff

08002498 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	099b      	lsrs	r3, r3, #6
 80024b4:	001a      	movs	r2, r3
 80024b6:	2301      	movs	r3, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	d10f      	bne.n	80024dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	2201      	movs	r2, #1
 80024c0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024c2:	d00b      	beq.n	80024dc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	099b      	lsrs	r3, r3, #6
 80024c8:	001a      	movs	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d005      	beq.n	80024dc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	0010      	movs	r0, r2
 80024d8:	4798      	blx	r3
    return;
 80024da:	e0d6      	b.n	800268a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	001a      	movs	r2, r3
 80024e2:	2301      	movs	r3, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d00b      	beq.n	8002500 <HAL_SPI_IRQHandler+0x68>
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	09db      	lsrs	r3, r3, #7
 80024ec:	001a      	movs	r2, r3
 80024ee:	2301      	movs	r3, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	d005      	beq.n	8002500 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	0010      	movs	r0, r2
 80024fc:	4798      	blx	r3
    return;
 80024fe:	e0c4      	b.n	800268a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	001a      	movs	r2, r3
 8002506:	2301      	movs	r3, #1
 8002508:	4013      	ands	r3, r2
 800250a:	d10c      	bne.n	8002526 <HAL_SPI_IRQHandler+0x8e>
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	099b      	lsrs	r3, r3, #6
 8002510:	001a      	movs	r2, r3
 8002512:	2301      	movs	r3, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d106      	bne.n	8002526 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	001a      	movs	r2, r3
 800251e:	2301      	movs	r3, #1
 8002520:	4013      	ands	r3, r2
 8002522:	d100      	bne.n	8002526 <HAL_SPI_IRQHandler+0x8e>
 8002524:	e0b1      	b.n	800268a <HAL_SPI_IRQHandler+0x1f2>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	095b      	lsrs	r3, r3, #5
 800252a:	001a      	movs	r2, r3
 800252c:	2301      	movs	r3, #1
 800252e:	4013      	ands	r3, r2
 8002530:	d100      	bne.n	8002534 <HAL_SPI_IRQHandler+0x9c>
 8002532:	e0aa      	b.n	800268a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	001a      	movs	r2, r3
 800253a:	2301      	movs	r3, #1
 800253c:	4013      	ands	r3, r2
 800253e:	d023      	beq.n	8002588 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	225d      	movs	r2, #93	; 0x5d
 8002544:	5c9b      	ldrb	r3, [r3, r2]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b03      	cmp	r3, #3
 800254a:	d011      	beq.n	8002570 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002550:	2204      	movs	r2, #4
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	e00b      	b.n	8002588 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
        return;
 8002586:	e080      	b.n	800268a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	001a      	movs	r2, r3
 800258e:	2301      	movs	r3, #1
 8002590:	4013      	ands	r3, r2
 8002592:	d014      	beq.n	80025be <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002598:	2201      	movs	r2, #1
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2140      	movs	r1, #64	; 0x40
 80025b8:	438a      	bics	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	001a      	movs	r2, r3
 80025c4:	2301      	movs	r3, #1
 80025c6:	4013      	ands	r3, r2
 80025c8:	d00c      	beq.n	80025e4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	2208      	movs	r2, #8
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d04d      	beq.n	8002688 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	21e0      	movs	r1, #224	; 0xe0
 80025f8:	438a      	bics	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	225d      	movs	r2, #93	; 0x5d
 8002600:	2101      	movs	r1, #1
 8002602:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2202      	movs	r2, #2
 8002608:	4013      	ands	r3, r2
 800260a:	d103      	bne.n	8002614 <HAL_SPI_IRQHandler+0x17c>
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2201      	movs	r2, #1
 8002610:	4013      	ands	r3, r2
 8002612:	d032      	beq.n	800267a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2103      	movs	r1, #3
 8002620:	438a      	bics	r2, r1
 8002622:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	2b00      	cmp	r3, #0
 800262a:	d010      	beq.n	800264e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	4a17      	ldr	r2, [pc, #92]	; (8002690 <HAL_SPI_IRQHandler+0x1f8>)
 8002632:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	0018      	movs	r0, r3
 800263a:	f7fe fc1b 	bl	8000e74 <HAL_DMA_Abort_IT>
 800263e:	1e03      	subs	r3, r0, #0
 8002640:	d005      	beq.n	800264e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	2b00      	cmp	r3, #0
 8002654:	d016      	beq.n	8002684 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	4a0d      	ldr	r2, [pc, #52]	; (8002690 <HAL_SPI_IRQHandler+0x1f8>)
 800265c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	0018      	movs	r0, r3
 8002664:	f7fe fc06 	bl	8000e74 <HAL_DMA_Abort_IT>
 8002668:	1e03      	subs	r3, r0, #0
 800266a:	d00b      	beq.n	8002684 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002670:	2240      	movs	r2, #64	; 0x40
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002678:	e004      	b.n	8002684 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0018      	movs	r0, r3
 800267e:	f000 f809 	bl	8002694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002682:	e000      	b.n	8002686 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002684:	46c0      	nop			; (mov r8, r8)
    return;
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46c0      	nop			; (mov r8, r8)
  }
}
 800268a:	46bd      	mov	sp, r7
 800268c:	b008      	add	sp, #32
 800268e:	bd80      	pop	{r7, pc}
 8002690:	080026a5 	.word	0x080026a5

08002694 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2246      	movs	r2, #70	; 0x46
 80026b6:	2100      	movs	r1, #0
 80026b8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	0018      	movs	r0, r3
 80026c4:	f7ff ffe6 	bl	8002694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b004      	add	sp, #16
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	1dfb      	adds	r3, r7, #7
 80026de:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026e0:	f7fe fb10 	bl	8000d04 <HAL_GetTick>
 80026e4:	0002      	movs	r2, r0
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	18d3      	adds	r3, r2, r3
 80026ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026f0:	f7fe fb08 	bl	8000d04 <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026f8:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	015b      	lsls	r3, r3, #5
 80026fe:	0d1b      	lsrs	r3, r3, #20
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	4353      	muls	r3, r2
 8002704:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002706:	e058      	b.n	80027ba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	d055      	beq.n	80027ba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800270e:	f7fe faf9 	bl	8000d04 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	429a      	cmp	r2, r3
 800271c:	d902      	bls.n	8002724 <SPI_WaitFlagStateUntilTimeout+0x54>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d142      	bne.n	80027aa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	21e0      	movs	r1, #224	; 0xe0
 8002730:	438a      	bics	r2, r1
 8002732:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	2382      	movs	r3, #130	; 0x82
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	429a      	cmp	r2, r3
 800273e:	d113      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	429a      	cmp	r2, r3
 800274a:	d005      	beq.n	8002758 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	429a      	cmp	r2, r3
 8002756:	d107      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2140      	movs	r1, #64	; 0x40
 8002764:	438a      	bics	r2, r1
 8002766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	019b      	lsls	r3, r3, #6
 8002770:	429a      	cmp	r2, r3
 8002772:	d110      	bne.n	8002796 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	491a      	ldr	r1, [pc, #104]	; (80027e8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002780:	400a      	ands	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2180      	movs	r1, #128	; 0x80
 8002790:	0189      	lsls	r1, r1, #6
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	225d      	movs	r2, #93	; 0x5d
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	225c      	movs	r2, #92	; 0x5c
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e017      	b.n	80027da <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	4013      	ands	r3, r2
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	425a      	negs	r2, r3
 80027ca:	4153      	adcs	r3, r2
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	001a      	movs	r2, r3
 80027d0:	1dfb      	adds	r3, r7, #7
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d197      	bne.n	8002708 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b008      	add	sp, #32
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	20000000 	.word	0x20000000
 80027e8:	ffffdfff 	.word	0xffffdfff

080027ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80027fa:	f7fe fa83 	bl	8000d04 <HAL_GetTick>
 80027fe:	0002      	movs	r2, r0
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	18d3      	adds	r3, r2, r3
 8002808:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800280a:	f7fe fa7b 	bl	8000d04 <HAL_GetTick>
 800280e:	0003      	movs	r3, r0
 8002810:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002812:	4b3f      	ldr	r3, [pc, #252]	; (8002910 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	0013      	movs	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	189b      	adds	r3, r3, r2
 800281c:	00da      	lsls	r2, r3, #3
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	0d1b      	lsrs	r3, r3, #20
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	4353      	muls	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002828:	e064      	b.n	80028f4 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	23c0      	movs	r3, #192	; 0xc0
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <SPI_WaitFifoStateUntilTimeout+0x56>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d103      	bne.n	8002842 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	330c      	adds	r3, #12
 8002840:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	d055      	beq.n	80028f4 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002848:	f7fe fa5c 	bl	8000d04 <HAL_GetTick>
 800284c:	0002      	movs	r2, r0
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	429a      	cmp	r2, r3
 8002856:	d902      	bls.n	800285e <SPI_WaitFifoStateUntilTimeout+0x72>
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d142      	bne.n	80028e4 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	21e0      	movs	r1, #224	; 0xe0
 800286a:	438a      	bics	r2, r1
 800286c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	2382      	movs	r3, #130	; 0x82
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	429a      	cmp	r2, r3
 8002878:	d113      	bne.n	80028a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	429a      	cmp	r2, r3
 8002884:	d005      	beq.n	8002892 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	429a      	cmp	r2, r3
 8002890:	d107      	bne.n	80028a2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2140      	movs	r1, #64	; 0x40
 800289e:	438a      	bics	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d110      	bne.n	80028d0 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4916      	ldr	r1, [pc, #88]	; (8002914 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80028ba:	400a      	ands	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2180      	movs	r1, #128	; 0x80
 80028ca:	0189      	lsls	r1, r1, #6
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	225d      	movs	r2, #93	; 0x5d
 80028d4:	2101      	movs	r1, #1
 80028d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	225c      	movs	r2, #92	; 0x5c
 80028dc:	2100      	movs	r1, #0
 80028de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e010      	b.n	8002906 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d192      	bne.n	800282a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b008      	add	sp, #32
 800290c:	bd80      	pop	{r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	20000000 	.word	0x20000000
 8002914:	ffffdfff 	.word	0xffffdfff

08002918 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	23c0      	movs	r3, #192	; 0xc0
 8002928:	0159      	lsls	r1, r3, #5
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	0013      	movs	r3, r2
 8002932:	2200      	movs	r2, #0
 8002934:	f7ff ff5a 	bl	80027ec <SPI_WaitFifoStateUntilTimeout>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d007      	beq.n	800294c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002940:	2220      	movs	r2, #32
 8002942:	431a      	orrs	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e027      	b.n	800299c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	0013      	movs	r3, r2
 8002956:	2200      	movs	r2, #0
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	f7ff feb9 	bl	80026d0 <SPI_WaitFlagStateUntilTimeout>
 800295e:	1e03      	subs	r3, r0, #0
 8002960:	d007      	beq.n	8002972 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	2220      	movs	r2, #32
 8002968:	431a      	orrs	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e014      	b.n	800299c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	23c0      	movs	r3, #192	; 0xc0
 8002976:	00d9      	lsls	r1, r3, #3
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	0013      	movs	r3, r2
 8002980:	2200      	movs	r2, #0
 8002982:	f7ff ff33 	bl	80027ec <SPI_WaitFifoStateUntilTimeout>
 8002986:	1e03      	subs	r3, r0, #0
 8002988:	d007      	beq.n	800299a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800298e:	2220      	movs	r2, #32
 8002990:	431a      	orrs	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e000      	b.n	800299c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b004      	add	sp, #16
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e04a      	b.n	8002a4c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	223d      	movs	r2, #61	; 0x3d
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d107      	bne.n	80029d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	223c      	movs	r2, #60	; 0x3c
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f841 	bl	8002a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	223d      	movs	r2, #61	; 0x3d
 80029d6:	2102      	movs	r1, #2
 80029d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	0019      	movs	r1, r3
 80029e4:	0010      	movs	r0, r2
 80029e6:	f000 f9e3 	bl	8002db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2248      	movs	r2, #72	; 0x48
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	223e      	movs	r2, #62	; 0x3e
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	223f      	movs	r2, #63	; 0x3f
 80029fe:	2101      	movs	r1, #1
 8002a00:	5499      	strb	r1, [r3, r2]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2241      	movs	r2, #65	; 0x41
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2242      	movs	r2, #66	; 0x42
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2243      	movs	r2, #67	; 0x43
 8002a1e:	2101      	movs	r1, #1
 8002a20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2244      	movs	r2, #68	; 0x44
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2245      	movs	r2, #69	; 0x45
 8002a2e:	2101      	movs	r1, #1
 8002a30:	5499      	strb	r1, [r3, r2]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2246      	movs	r2, #70	; 0x46
 8002a36:	2101      	movs	r1, #1
 8002a38:	5499      	strb	r1, [r3, r2]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2247      	movs	r2, #71	; 0x47
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	223d      	movs	r2, #61	; 0x3d
 8002a46:	2101      	movs	r1, #1
 8002a48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b002      	add	sp, #8
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	223d      	movs	r2, #61	; 0x3d
 8002a70:	5c9b      	ldrb	r3, [r3, r2]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d001      	beq.n	8002a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e03d      	b.n	8002af8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	223d      	movs	r2, #61	; 0x3d
 8002a80:	2102      	movs	r1, #2
 8002a82:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	430a      	orrs	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	; (8002b00 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x50>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	05db      	lsls	r3, r3, #23
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x50>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d116      	bne.n	8002ae2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_TIM_Base_Start_IT+0xa4>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d016      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x90>
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	025b      	lsls	r3, r3, #9
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d011      	beq.n	8002af4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae0:	e008      	b.n	8002af4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e000      	b.n	8002af6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b004      	add	sp, #16
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400
 8002b08:	00010007 	.word	0x00010007

08002b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d124      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d11d      	bne.n	8002b6c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2203      	movs	r2, #3
 8002b36:	4252      	negs	r2, r2
 8002b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2203      	movs	r2, #3
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f000 f916 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e007      	b.n	8002b66 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f000 f909 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 f915 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2204      	movs	r2, #4
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d125      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2204      	movs	r2, #4
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d11e      	bne.n	8002bc6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2205      	movs	r2, #5
 8002b8e:	4252      	negs	r2, r2
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	23c0      	movs	r3, #192	; 0xc0
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f8e9 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002bae:	e007      	b.n	8002bc0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f000 f8dc 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 f8e8 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2208      	movs	r2, #8
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d124      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2208      	movs	r2, #8
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d11d      	bne.n	8002c1e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2209      	movs	r2, #9
 8002be8:	4252      	negs	r2, r2
 8002bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d004      	beq.n	8002c08 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 f8bd 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002c06:	e007      	b.n	8002c18 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 f8b0 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 f8bc 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2210      	movs	r2, #16
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d125      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2210      	movs	r2, #16
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d11e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2211      	movs	r2, #17
 8002c40:	4252      	negs	r2, r2
 8002c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2208      	movs	r2, #8
 8002c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	23c0      	movs	r3, #192	; 0xc0
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4013      	ands	r3, r2
 8002c56:	d004      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 f890 	bl	8002d80 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e007      	b.n	8002c72 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f883 	bl	8002d70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 f88f 	bl	8002d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10f      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d108      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	4252      	negs	r2, r2
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fd fd9f 	bl	80007e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b80      	cmp	r3, #128	; 0x80
 8002cb2:	d10f      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b80      	cmp	r3, #128	; 0x80
 8002cc0:	d108      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2281      	movs	r2, #129	; 0x81
 8002cc8:	4252      	negs	r2, r2
 8002cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 f8ec 	bl	8002eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	401a      	ands	r2, r3
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d10e      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b80      	cmp	r3, #128	; 0x80
 8002cf4:	d107      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_TIM_IRQHandler+0x260>)
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 f8db 	bl	8002ebc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2240      	movs	r2, #64	; 0x40
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d10f      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2240      	movs	r2, #64	; 0x40
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b40      	cmp	r3, #64	; 0x40
 8002d20:	d108      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2241      	movs	r2, #65	; 0x41
 8002d28:	4252      	negs	r2, r2
 8002d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f836 	bl	8002da0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d10f      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d108      	bne.n	8002d62 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2221      	movs	r2, #33	; 0x21
 8002d56:	4252      	negs	r2, r2
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 f89d 	bl	8002e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b002      	add	sp, #8
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	fffffeff 	.word	0xfffffeff

08002d70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <TIM_Base_SetConfig+0xd4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d008      	beq.n	8002dda <TIM_Base_SetConfig+0x2a>
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	05db      	lsls	r3, r3, #23
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d003      	beq.n	8002dda <TIM_Base_SetConfig+0x2a>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <TIM_Base_SetConfig+0xd8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d108      	bne.n	8002dec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2270      	movs	r2, #112	; 0x70
 8002dde:	4393      	bics	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a25      	ldr	r2, [pc, #148]	; (8002e84 <TIM_Base_SetConfig+0xd4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d014      	beq.n	8002e1e <TIM_Base_SetConfig+0x6e>
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	05db      	lsls	r3, r3, #23
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d00f      	beq.n	8002e1e <TIM_Base_SetConfig+0x6e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <TIM_Base_SetConfig+0xd8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00b      	beq.n	8002e1e <TIM_Base_SetConfig+0x6e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a20      	ldr	r2, [pc, #128]	; (8002e8c <TIM_Base_SetConfig+0xdc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d007      	beq.n	8002e1e <TIM_Base_SetConfig+0x6e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <TIM_Base_SetConfig+0xe0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_Base_SetConfig+0x6e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a1e      	ldr	r2, [pc, #120]	; (8002e94 <TIM_Base_SetConfig+0xe4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d108      	bne.n	8002e30 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <TIM_Base_SetConfig+0xe8>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	4393      	bics	r3, r2
 8002e36:	001a      	movs	r2, r3
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <TIM_Base_SetConfig+0xd4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0xbe>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <TIM_Base_SetConfig+0xe0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0xbe>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <TIM_Base_SetConfig+0xe4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d103      	bne.n	8002e76 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	615a      	str	r2, [r3, #20]
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b004      	add	sp, #16
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40002000 	.word	0x40002000
 8002e90:	40014400 	.word	0x40014400
 8002e94:	40014800 	.word	0x40014800
 8002e98:	fffffcff 	.word	0xfffffcff

08002e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b002      	add	sp, #8
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e046      	b.n	8002f6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2284      	movs	r2, #132	; 0x84
 8002ee2:	589b      	ldr	r3, [r3, r2]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2280      	movs	r2, #128	; 0x80
 8002eec:	2100      	movs	r1, #0
 8002eee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7fd fe04 	bl	8000b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2284      	movs	r2, #132	; 0x84
 8002efc:	2124      	movs	r1, #36	; 0x24
 8002efe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	438a      	bics	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 f830 	bl	8002f78 <UART_SetConfig>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e024      	b.n	8002f6c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 fab5 	bl	800349c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	490d      	ldr	r1, [pc, #52]	; (8002f74 <HAL_UART_Init+0xa8>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	212a      	movs	r1, #42	; 0x2a
 8002f4e:	438a      	bics	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 fb4d 	bl	8003604 <UART_CheckIdleState>
 8002f6a:	0003      	movs	r3, r0
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	ffffb7ff 	.word	0xffffb7ff

08002f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7a:	b091      	sub	sp, #68	; 0x44
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f80:	231a      	movs	r3, #26
 8002f82:	2220      	movs	r2, #32
 8002f84:	4694      	mov	ip, r2
 8002f86:	44bc      	add	ip, r7
 8002f88:	4463      	add	r3, ip
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fac:	4313      	orrs	r3, r2
 8002fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4ac9      	ldr	r2, [pc, #804]	; (80032dc <UART_SetConfig+0x364>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc2:	430b      	orrs	r3, r1
 8002fc4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4ac4      	ldr	r2, [pc, #784]	; (80032e0 <UART_SetConfig+0x368>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	68d9      	ldr	r1, [r3, #12]
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	0003      	movs	r3, r0
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4abe      	ldr	r2, [pc, #760]	; (80032e4 <UART_SetConfig+0x36c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d004      	beq.n	8002ffa <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4ab9      	ldr	r2, [pc, #740]	; (80032e8 <UART_SetConfig+0x370>)
 8003002:	4013      	ands	r3, r2
 8003004:	0019      	movs	r1, r3
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300c:	430b      	orrs	r3, r1
 800300e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	220f      	movs	r2, #15
 8003018:	4393      	bics	r3, r2
 800301a:	0018      	movs	r0, r3
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	0003      	movs	r3, r0
 8003026:	430b      	orrs	r3, r1
 8003028:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4aaf      	ldr	r2, [pc, #700]	; (80032ec <UART_SetConfig+0x374>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d134      	bne.n	800309e <UART_SetConfig+0x126>
 8003034:	4bae      	ldr	r3, [pc, #696]	; (80032f0 <UART_SetConfig+0x378>)
 8003036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003038:	2203      	movs	r2, #3
 800303a:	4013      	ands	r3, r2
 800303c:	2b01      	cmp	r3, #1
 800303e:	d015      	beq.n	800306c <UART_SetConfig+0xf4>
 8003040:	d304      	bcc.n	800304c <UART_SetConfig+0xd4>
 8003042:	2b02      	cmp	r3, #2
 8003044:	d00a      	beq.n	800305c <UART_SetConfig+0xe4>
 8003046:	2b03      	cmp	r3, #3
 8003048:	d018      	beq.n	800307c <UART_SetConfig+0x104>
 800304a:	e01f      	b.n	800308c <UART_SetConfig+0x114>
 800304c:	231b      	movs	r3, #27
 800304e:	2220      	movs	r2, #32
 8003050:	4694      	mov	ip, r2
 8003052:	44bc      	add	ip, r7
 8003054:	4463      	add	r3, ip
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e07b      	b.n	8003154 <UART_SetConfig+0x1dc>
 800305c:	231b      	movs	r3, #27
 800305e:	2220      	movs	r2, #32
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	2202      	movs	r2, #2
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e073      	b.n	8003154 <UART_SetConfig+0x1dc>
 800306c:	231b      	movs	r3, #27
 800306e:	2220      	movs	r2, #32
 8003070:	4694      	mov	ip, r2
 8003072:	44bc      	add	ip, r7
 8003074:	4463      	add	r3, ip
 8003076:	2204      	movs	r2, #4
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	e06b      	b.n	8003154 <UART_SetConfig+0x1dc>
 800307c:	231b      	movs	r3, #27
 800307e:	2220      	movs	r2, #32
 8003080:	4694      	mov	ip, r2
 8003082:	44bc      	add	ip, r7
 8003084:	4463      	add	r3, ip
 8003086:	2208      	movs	r2, #8
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e063      	b.n	8003154 <UART_SetConfig+0x1dc>
 800308c:	231b      	movs	r3, #27
 800308e:	2220      	movs	r2, #32
 8003090:	4694      	mov	ip, r2
 8003092:	44bc      	add	ip, r7
 8003094:	4463      	add	r3, ip
 8003096:	2210      	movs	r2, #16
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	e05a      	b.n	8003154 <UART_SetConfig+0x1dc>
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a94      	ldr	r2, [pc, #592]	; (80032f4 <UART_SetConfig+0x37c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d107      	bne.n	80030b8 <UART_SetConfig+0x140>
 80030a8:	231b      	movs	r3, #27
 80030aa:	2220      	movs	r2, #32
 80030ac:	4694      	mov	ip, r2
 80030ae:	44bc      	add	ip, r7
 80030b0:	4463      	add	r3, ip
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e04d      	b.n	8003154 <UART_SetConfig+0x1dc>
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a89      	ldr	r2, [pc, #548]	; (80032e4 <UART_SetConfig+0x36c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d141      	bne.n	8003146 <UART_SetConfig+0x1ce>
 80030c2:	4b8b      	ldr	r3, [pc, #556]	; (80032f0 <UART_SetConfig+0x378>)
 80030c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030c6:	23c0      	movs	r3, #192	; 0xc0
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	4013      	ands	r3, r2
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	00d2      	lsls	r2, r2, #3
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d01f      	beq.n	8003114 <UART_SetConfig+0x19c>
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	00d2      	lsls	r2, r2, #3
 80030d8:	4293      	cmp	r3, r2
 80030da:	d802      	bhi.n	80030e2 <UART_SetConfig+0x16a>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <UART_SetConfig+0x17c>
 80030e0:	e028      	b.n	8003134 <UART_SetConfig+0x1bc>
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	0112      	lsls	r2, r2, #4
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00c      	beq.n	8003104 <UART_SetConfig+0x18c>
 80030ea:	22c0      	movs	r2, #192	; 0xc0
 80030ec:	0112      	lsls	r2, r2, #4
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d018      	beq.n	8003124 <UART_SetConfig+0x1ac>
 80030f2:	e01f      	b.n	8003134 <UART_SetConfig+0x1bc>
 80030f4:	231b      	movs	r3, #27
 80030f6:	2220      	movs	r2, #32
 80030f8:	4694      	mov	ip, r2
 80030fa:	44bc      	add	ip, r7
 80030fc:	4463      	add	r3, ip
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e027      	b.n	8003154 <UART_SetConfig+0x1dc>
 8003104:	231b      	movs	r3, #27
 8003106:	2220      	movs	r2, #32
 8003108:	4694      	mov	ip, r2
 800310a:	44bc      	add	ip, r7
 800310c:	4463      	add	r3, ip
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]
 8003112:	e01f      	b.n	8003154 <UART_SetConfig+0x1dc>
 8003114:	231b      	movs	r3, #27
 8003116:	2220      	movs	r2, #32
 8003118:	4694      	mov	ip, r2
 800311a:	44bc      	add	ip, r7
 800311c:	4463      	add	r3, ip
 800311e:	2204      	movs	r2, #4
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e017      	b.n	8003154 <UART_SetConfig+0x1dc>
 8003124:	231b      	movs	r3, #27
 8003126:	2220      	movs	r2, #32
 8003128:	4694      	mov	ip, r2
 800312a:	44bc      	add	ip, r7
 800312c:	4463      	add	r3, ip
 800312e:	2208      	movs	r2, #8
 8003130:	701a      	strb	r2, [r3, #0]
 8003132:	e00f      	b.n	8003154 <UART_SetConfig+0x1dc>
 8003134:	231b      	movs	r3, #27
 8003136:	2220      	movs	r2, #32
 8003138:	4694      	mov	ip, r2
 800313a:	44bc      	add	ip, r7
 800313c:	4463      	add	r3, ip
 800313e:	2210      	movs	r2, #16
 8003140:	701a      	strb	r2, [r3, #0]
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	e006      	b.n	8003154 <UART_SetConfig+0x1dc>
 8003146:	231b      	movs	r3, #27
 8003148:	2220      	movs	r2, #32
 800314a:	4694      	mov	ip, r2
 800314c:	44bc      	add	ip, r7
 800314e:	4463      	add	r3, ip
 8003150:	2210      	movs	r2, #16
 8003152:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a62      	ldr	r2, [pc, #392]	; (80032e4 <UART_SetConfig+0x36c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d000      	beq.n	8003160 <UART_SetConfig+0x1e8>
 800315e:	e093      	b.n	8003288 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003160:	231b      	movs	r3, #27
 8003162:	2220      	movs	r2, #32
 8003164:	4694      	mov	ip, r2
 8003166:	44bc      	add	ip, r7
 8003168:	4463      	add	r3, ip
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d00d      	beq.n	800318c <UART_SetConfig+0x214>
 8003170:	dc02      	bgt.n	8003178 <UART_SetConfig+0x200>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <UART_SetConfig+0x20a>
 8003176:	e015      	b.n	80031a4 <UART_SetConfig+0x22c>
 8003178:	2b04      	cmp	r3, #4
 800317a:	d00a      	beq.n	8003192 <UART_SetConfig+0x21a>
 800317c:	2b08      	cmp	r3, #8
 800317e:	d00d      	beq.n	800319c <UART_SetConfig+0x224>
 8003180:	e010      	b.n	80031a4 <UART_SetConfig+0x22c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003182:	f7fe fd65 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 8003186:	0003      	movs	r3, r0
 8003188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800318a:	e015      	b.n	80031b8 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <UART_SetConfig+0x380>)
 800318e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003190:	e012      	b.n	80031b8 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7fe fcd1 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8003196:	0003      	movs	r3, r0
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800319a:	e00d      	b.n	80031b8 <UART_SetConfig+0x240>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80031a2:	e009      	b.n	80031b8 <UART_SetConfig+0x240>
      default:
        pclk = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80031a8:	231a      	movs	r3, #26
 80031aa:	2220      	movs	r2, #32
 80031ac:	4694      	mov	ip, r2
 80031ae:	44bc      	add	ip, r7
 80031b0:	4463      	add	r3, ip
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
        break;
 80031b6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d100      	bne.n	80031c0 <UART_SetConfig+0x248>
 80031be:	e14f      	b.n	8003460 <UART_SetConfig+0x4e8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c4:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <UART_SetConfig+0x384>)
 80031c6:	0052      	lsls	r2, r2, #1
 80031c8:	5ad3      	ldrh	r3, [r2, r3]
 80031ca:	0019      	movs	r1, r3
 80031cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031ce:	f7fc ff9b 	bl	8000108 <__udivsi3>
 80031d2:	0003      	movs	r3, r0
 80031d4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	0013      	movs	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	189b      	adds	r3, r3, r2
 80031e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d305      	bcc.n	80031f2 <UART_SetConfig+0x27a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d907      	bls.n	8003202 <UART_SetConfig+0x28a>
      {
        ret = HAL_ERROR;
 80031f2:	231a      	movs	r3, #26
 80031f4:	2220      	movs	r2, #32
 80031f6:	4694      	mov	ip, r2
 80031f8:	44bc      	add	ip, r7
 80031fa:	4463      	add	r3, ip
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e12e      	b.n	8003460 <UART_SetConfig+0x4e8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800320e:	4b3b      	ldr	r3, [pc, #236]	; (80032fc <UART_SetConfig+0x384>)
 8003210:	0052      	lsls	r2, r2, #1
 8003212:	5ad3      	ldrh	r3, [r2, r3]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	69b8      	ldr	r0, [r7, #24]
 8003220:	69f9      	ldr	r1, [r7, #28]
 8003222:	f7fc fffd 	bl	8000220 <__aeabi_uldivmod>
 8003226:	0003      	movs	r3, r0
 8003228:	000c      	movs	r4, r1
 800322a:	0e1a      	lsrs	r2, r3, #24
 800322c:	0226      	lsls	r6, r4, #8
 800322e:	4316      	orrs	r6, r2
 8003230:	021d      	lsls	r5, r3, #8
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68b8      	ldr	r0, [r7, #8]
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	1940      	adds	r0, r0, r5
 8003244:	4171      	adcs	r1, r6
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	2300      	movs	r3, #0
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f7fc ffe4 	bl	8000220 <__aeabi_uldivmod>
 8003258:	0003      	movs	r3, r0
 800325a:	000c      	movs	r4, r1
 800325c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <UART_SetConfig+0x388>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d908      	bls.n	8003278 <UART_SetConfig+0x300>
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	4a26      	ldr	r2, [pc, #152]	; (8003304 <UART_SetConfig+0x38c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d804      	bhi.n	8003278 <UART_SetConfig+0x300>
        {
          huart->Instance->BRR = usartdiv;
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003274:	60da      	str	r2, [r3, #12]
 8003276:	e0f3      	b.n	8003460 <UART_SetConfig+0x4e8>
        }
        else
        {
          ret = HAL_ERROR;
 8003278:	231a      	movs	r3, #26
 800327a:	2220      	movs	r2, #32
 800327c:	4694      	mov	ip, r2
 800327e:	44bc      	add	ip, r7
 8003280:	4463      	add	r3, ip
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e0eb      	b.n	8003460 <UART_SetConfig+0x4e8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	429a      	cmp	r2, r3
 8003292:	d000      	beq.n	8003296 <UART_SetConfig+0x31e>
 8003294:	e08a      	b.n	80033ac <UART_SetConfig+0x434>
  {
    switch (clocksource)
 8003296:	231b      	movs	r3, #27
 8003298:	2220      	movs	r2, #32
 800329a:	4694      	mov	ip, r2
 800329c:	44bc      	add	ip, r7
 800329e:	4463      	add	r3, ip
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d00d      	beq.n	80032c2 <UART_SetConfig+0x34a>
 80032a6:	dc02      	bgt.n	80032ae <UART_SetConfig+0x336>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d005      	beq.n	80032b8 <UART_SetConfig+0x340>
 80032ac:	e02c      	b.n	8003308 <UART_SetConfig+0x390>
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d00a      	beq.n	80032c8 <UART_SetConfig+0x350>
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d00d      	beq.n	80032d2 <UART_SetConfig+0x35a>
 80032b6:	e027      	b.n	8003308 <UART_SetConfig+0x390>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b8:	f7fe fcca 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 80032bc:	0003      	movs	r3, r0
 80032be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032c0:	e02c      	b.n	800331c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <UART_SetConfig+0x380>)
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032c6:	e029      	b.n	800331c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c8:	f7fe fc36 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80032cc:	0003      	movs	r3, r0
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032d0:	e024      	b.n	800331c <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	021b      	lsls	r3, r3, #8
 80032d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032d8:	e020      	b.n	800331c <UART_SetConfig+0x3a4>
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	cfff69f3 	.word	0xcfff69f3
 80032e0:	ffffcfff 	.word	0xffffcfff
 80032e4:	40008000 	.word	0x40008000
 80032e8:	11fff4ff 	.word	0x11fff4ff
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40004400 	.word	0x40004400
 80032f8:	00f42400 	.word	0x00f42400
 80032fc:	08005e60 	.word	0x08005e60
 8003300:	000002ff 	.word	0x000002ff
 8003304:	000fffff 	.word	0x000fffff
      default:
        pclk = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800330c:	231a      	movs	r3, #26
 800330e:	2220      	movs	r2, #32
 8003310:	4694      	mov	ip, r2
 8003312:	44bc      	add	ip, r7
 8003314:	4463      	add	r3, ip
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
        break;
 800331a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	2b00      	cmp	r3, #0
 8003320:	d100      	bne.n	8003324 <UART_SetConfig+0x3ac>
 8003322:	e09d      	b.n	8003460 <UART_SetConfig+0x4e8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003328:	4b59      	ldr	r3, [pc, #356]	; (8003490 <UART_SetConfig+0x518>)
 800332a:	0052      	lsls	r2, r2, #1
 800332c:	5ad3      	ldrh	r3, [r2, r3]
 800332e:	0019      	movs	r1, r3
 8003330:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003332:	f7fc fee9 	bl	8000108 <__udivsi3>
 8003336:	0003      	movs	r3, r0
 8003338:	005a      	lsls	r2, r3, #1
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	18d2      	adds	r2, r2, r3
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	0019      	movs	r1, r3
 8003348:	0010      	movs	r0, r2
 800334a:	f7fc fedd 	bl	8000108 <__udivsi3>
 800334e:	0003      	movs	r3, r0
 8003350:	b29b      	uxth	r3, r3
 8003352:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	2b0f      	cmp	r3, #15
 8003358:	d920      	bls.n	800339c <UART_SetConfig+0x424>
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	4a4d      	ldr	r2, [pc, #308]	; (8003494 <UART_SetConfig+0x51c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d81c      	bhi.n	800339c <UART_SetConfig+0x424>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	b29a      	uxth	r2, r3
 8003366:	200e      	movs	r0, #14
 8003368:	2420      	movs	r4, #32
 800336a:	193b      	adds	r3, r7, r4
 800336c:	181b      	adds	r3, r3, r0
 800336e:	210f      	movs	r1, #15
 8003370:	438a      	bics	r2, r1
 8003372:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	b29b      	uxth	r3, r3
 800337a:	2207      	movs	r2, #7
 800337c:	4013      	ands	r3, r2
 800337e:	b299      	uxth	r1, r3
 8003380:	193b      	adds	r3, r7, r4
 8003382:	181b      	adds	r3, r3, r0
 8003384:	193a      	adds	r2, r7, r4
 8003386:	1812      	adds	r2, r2, r0
 8003388:	8812      	ldrh	r2, [r2, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	193a      	adds	r2, r7, r4
 8003394:	1812      	adds	r2, r2, r0
 8003396:	8812      	ldrh	r2, [r2, #0]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	e061      	b.n	8003460 <UART_SetConfig+0x4e8>
      }
      else
      {
        ret = HAL_ERROR;
 800339c:	231a      	movs	r3, #26
 800339e:	2220      	movs	r2, #32
 80033a0:	4694      	mov	ip, r2
 80033a2:	44bc      	add	ip, r7
 80033a4:	4463      	add	r3, ip
 80033a6:	2201      	movs	r2, #1
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e059      	b.n	8003460 <UART_SetConfig+0x4e8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ac:	231b      	movs	r3, #27
 80033ae:	2220      	movs	r2, #32
 80033b0:	4694      	mov	ip, r2
 80033b2:	44bc      	add	ip, r7
 80033b4:	4463      	add	r3, ip
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d00d      	beq.n	80033d8 <UART_SetConfig+0x460>
 80033bc:	dc02      	bgt.n	80033c4 <UART_SetConfig+0x44c>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <UART_SetConfig+0x456>
 80033c2:	e015      	b.n	80033f0 <UART_SetConfig+0x478>
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d00a      	beq.n	80033de <UART_SetConfig+0x466>
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d00d      	beq.n	80033e8 <UART_SetConfig+0x470>
 80033cc:	e010      	b.n	80033f0 <UART_SetConfig+0x478>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ce:	f7fe fc3f 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 80033d2:	0003      	movs	r3, r0
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033d6:	e015      	b.n	8003404 <UART_SetConfig+0x48c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d8:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <UART_SetConfig+0x520>)
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033dc:	e012      	b.n	8003404 <UART_SetConfig+0x48c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033de:	f7fe fbab 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80033e2:	0003      	movs	r3, r0
 80033e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033e6:	e00d      	b.n	8003404 <UART_SetConfig+0x48c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	021b      	lsls	r3, r3, #8
 80033ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ee:	e009      	b.n	8003404 <UART_SetConfig+0x48c>
      default:
        pclk = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033f4:	231a      	movs	r3, #26
 80033f6:	2220      	movs	r2, #32
 80033f8:	4694      	mov	ip, r2
 80033fa:	44bc      	add	ip, r7
 80033fc:	4463      	add	r3, ip
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
        break;
 8003402:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003406:	2b00      	cmp	r3, #0
 8003408:	d02a      	beq.n	8003460 <UART_SetConfig+0x4e8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800340e:	4b20      	ldr	r3, [pc, #128]	; (8003490 <UART_SetConfig+0x518>)
 8003410:	0052      	lsls	r2, r2, #1
 8003412:	5ad3      	ldrh	r3, [r2, r3]
 8003414:	0019      	movs	r1, r3
 8003416:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003418:	f7fc fe76 	bl	8000108 <__udivsi3>
 800341c:	0003      	movs	r3, r0
 800341e:	001a      	movs	r2, r3
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	085b      	lsrs	r3, r3, #1
 8003426:	18d2      	adds	r2, r2, r3
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	0019      	movs	r1, r3
 800342e:	0010      	movs	r0, r2
 8003430:	f7fc fe6a 	bl	8000108 <__udivsi3>
 8003434:	0003      	movs	r3, r0
 8003436:	b29b      	uxth	r3, r3
 8003438:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	2b0f      	cmp	r3, #15
 800343e:	d908      	bls.n	8003452 <UART_SetConfig+0x4da>
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <UART_SetConfig+0x51c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d804      	bhi.n	8003452 <UART_SetConfig+0x4da>
      {
        huart->Instance->BRR = usartdiv;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344e:	60da      	str	r2, [r3, #12]
 8003450:	e006      	b.n	8003460 <UART_SetConfig+0x4e8>
      }
      else
      {
        ret = HAL_ERROR;
 8003452:	231a      	movs	r3, #26
 8003454:	2220      	movs	r2, #32
 8003456:	4694      	mov	ip, r2
 8003458:	44bc      	add	ip, r7
 800345a:	4463      	add	r3, ip
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	226a      	movs	r2, #106	; 0x6a
 8003464:	2101      	movs	r1, #1
 8003466:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	2268      	movs	r2, #104	; 0x68
 800346c:	2101      	movs	r1, #1
 800346e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	2200      	movs	r2, #0
 8003474:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2200      	movs	r2, #0
 800347a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800347c:	231a      	movs	r3, #26
 800347e:	2220      	movs	r2, #32
 8003480:	4694      	mov	ip, r2
 8003482:	44bc      	add	ip, r7
 8003484:	4463      	add	r3, ip
 8003486:	781b      	ldrb	r3, [r3, #0]
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b011      	add	sp, #68	; 0x44
 800348e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003490:	08005e60 	.word	0x08005e60
 8003494:	0000ffff 	.word	0x0000ffff
 8003498:	00f42400 	.word	0x00f42400

0800349c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	2201      	movs	r2, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a4a      	ldr	r2, [pc, #296]	; (80035e0 <UART_AdvFeatureConfig+0x144>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	d00b      	beq.n	80034e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4a43      	ldr	r2, [pc, #268]	; (80035e4 <UART_AdvFeatureConfig+0x148>)
 80034d8:	4013      	ands	r3, r2
 80034da:	0019      	movs	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	2204      	movs	r2, #4
 80034ee:	4013      	ands	r3, r2
 80034f0:	d00b      	beq.n	800350a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4a3b      	ldr	r2, [pc, #236]	; (80035e8 <UART_AdvFeatureConfig+0x14c>)
 80034fa:	4013      	ands	r3, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	2208      	movs	r2, #8
 8003510:	4013      	ands	r3, r2
 8003512:	d00b      	beq.n	800352c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4a34      	ldr	r2, [pc, #208]	; (80035ec <UART_AdvFeatureConfig+0x150>)
 800351c:	4013      	ands	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	2210      	movs	r2, #16
 8003532:	4013      	ands	r3, r2
 8003534:	d00b      	beq.n	800354e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <UART_AdvFeatureConfig+0x154>)
 800353e:	4013      	ands	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	2220      	movs	r2, #32
 8003554:	4013      	ands	r3, r2
 8003556:	d00b      	beq.n	8003570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	4a25      	ldr	r2, [pc, #148]	; (80035f4 <UART_AdvFeatureConfig+0x158>)
 8003560:	4013      	ands	r3, r2
 8003562:	0019      	movs	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	2240      	movs	r2, #64	; 0x40
 8003576:	4013      	ands	r3, r2
 8003578:	d01d      	beq.n	80035b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <UART_AdvFeatureConfig+0x15c>)
 8003582:	4013      	ands	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003596:	2380      	movs	r3, #128	; 0x80
 8003598:	035b      	lsls	r3, r3, #13
 800359a:	429a      	cmp	r2, r3
 800359c:	d10b      	bne.n	80035b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	4a15      	ldr	r2, [pc, #84]	; (80035fc <UART_AdvFeatureConfig+0x160>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	4013      	ands	r3, r2
 80035be:	d00b      	beq.n	80035d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4a0e      	ldr	r2, [pc, #56]	; (8003600 <UART_AdvFeatureConfig+0x164>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  }
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	fffdffff 	.word	0xfffdffff
 80035e4:	fffeffff 	.word	0xfffeffff
 80035e8:	fffbffff 	.word	0xfffbffff
 80035ec:	ffff7fff 	.word	0xffff7fff
 80035f0:	ffffefff 	.word	0xffffefff
 80035f4:	ffffdfff 	.word	0xffffdfff
 80035f8:	ffefffff 	.word	0xffefffff
 80035fc:	ff9fffff 	.word	0xff9fffff
 8003600:	fff7ffff 	.word	0xfff7ffff

08003604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	228c      	movs	r2, #140	; 0x8c
 8003610:	2100      	movs	r1, #0
 8003612:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003614:	f7fd fb76 	bl	8000d04 <HAL_GetTick>
 8003618:	0003      	movs	r3, r0
 800361a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2208      	movs	r2, #8
 8003624:	4013      	ands	r3, r2
 8003626:	2b08      	cmp	r3, #8
 8003628:	d10d      	bne.n	8003646 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	0399      	lsls	r1, r3, #14
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <UART_CheckIdleState+0x94>)
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	0013      	movs	r3, r2
 8003638:	2200      	movs	r2, #0
 800363a:	f000 f82f 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 800363e:	1e03      	subs	r3, r0, #0
 8003640:	d001      	beq.n	8003646 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e024      	b.n	8003690 <UART_CheckIdleState+0x8c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2204      	movs	r2, #4
 800364e:	4013      	ands	r3, r2
 8003650:	2b04      	cmp	r3, #4
 8003652:	d10d      	bne.n	8003670 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	03d9      	lsls	r1, r3, #15
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4b0e      	ldr	r3, [pc, #56]	; (8003698 <UART_CheckIdleState+0x94>)
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	0013      	movs	r3, r2
 8003662:	2200      	movs	r2, #0
 8003664:	f000 f81a 	bl	800369c <UART_WaitOnFlagUntilTimeout>
 8003668:	1e03      	subs	r3, r0, #0
 800366a:	d001      	beq.n	8003670 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e00f      	b.n	8003690 <UART_CheckIdleState+0x8c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2284      	movs	r2, #132	; 0x84
 8003674:	2120      	movs	r1, #32
 8003676:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2288      	movs	r2, #136	; 0x88
 800367c:	2120      	movs	r1, #32
 800367e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	2100      	movs	r1, #0
 800368c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b004      	add	sp, #16
 8003696:	bd80      	pop	{r7, pc}
 8003698:	01ffffff 	.word	0x01ffffff

0800369c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ac:	e062      	b.n	8003774 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	3301      	adds	r3, #1
 80036b2:	d05f      	beq.n	8003774 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7fd fb26 	bl	8000d04 <HAL_GetTick>
 80036b8:	0002      	movs	r2, r0
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11d      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4931      	ldr	r1, [pc, #196]	; (800379c <UART_WaitOnFlagUntilTimeout+0x100>)
 80036d6:	400a      	ands	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2101      	movs	r1, #1
 80036e6:	438a      	bics	r2, r1
 80036e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2284      	movs	r2, #132	; 0x84
 80036ee:	2120      	movs	r1, #32
 80036f0:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2288      	movs	r2, #136	; 0x88
 80036f6:	2120      	movs	r1, #32
 80036f8:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2280      	movs	r2, #128	; 0x80
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e046      	b.n	8003794 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2204      	movs	r2, #4
 800370e:	4013      	ands	r3, r2
 8003710:	d030      	beq.n	8003774 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	401a      	ands	r2, r3
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	429a      	cmp	r2, r3
 8003724:	d126      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	0112      	lsls	r2, r2, #4
 800372e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4918      	ldr	r1, [pc, #96]	; (800379c <UART_WaitOnFlagUntilTimeout+0x100>)
 800373c:	400a      	ands	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2101      	movs	r1, #1
 800374c:	438a      	bics	r2, r1
 800374e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2284      	movs	r2, #132	; 0x84
 8003754:	2120      	movs	r1, #32
 8003756:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2288      	movs	r2, #136	; 0x88
 800375c:	2120      	movs	r1, #32
 800375e:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	228c      	movs	r2, #140	; 0x8c
 8003764:	2120      	movs	r1, #32
 8003766:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2280      	movs	r2, #128	; 0x80
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e00f      	b.n	8003794 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4013      	ands	r3, r2
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	425a      	negs	r2, r3
 8003784:	4153      	adcs	r3, r2
 8003786:	b2db      	uxtb	r3, r3
 8003788:	001a      	movs	r2, r3
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d08d      	beq.n	80036ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}
 800379c:	fffffe5f 	.word	0xfffffe5f

080037a0 <__NVIC_SetPriority>:
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	0002      	movs	r2, r0
 80037a8:	6039      	str	r1, [r7, #0]
 80037aa:	1dfb      	adds	r3, r7, #7
 80037ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80037ae:	1dfb      	adds	r3, r7, #7
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b7f      	cmp	r3, #127	; 0x7f
 80037b4:	d828      	bhi.n	8003808 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037b6:	4a2f      	ldr	r2, [pc, #188]	; (8003874 <__NVIC_SetPriority+0xd4>)
 80037b8:	1dfb      	adds	r3, r7, #7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	33c0      	adds	r3, #192	; 0xc0
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	589b      	ldr	r3, [r3, r2]
 80037c6:	1dfa      	adds	r2, r7, #7
 80037c8:	7812      	ldrb	r2, [r2, #0]
 80037ca:	0011      	movs	r1, r2
 80037cc:	2203      	movs	r2, #3
 80037ce:	400a      	ands	r2, r1
 80037d0:	00d2      	lsls	r2, r2, #3
 80037d2:	21ff      	movs	r1, #255	; 0xff
 80037d4:	4091      	lsls	r1, r2
 80037d6:	000a      	movs	r2, r1
 80037d8:	43d2      	mvns	r2, r2
 80037da:	401a      	ands	r2, r3
 80037dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	22ff      	movs	r2, #255	; 0xff
 80037e4:	401a      	ands	r2, r3
 80037e6:	1dfb      	adds	r3, r7, #7
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	0018      	movs	r0, r3
 80037ec:	2303      	movs	r3, #3
 80037ee:	4003      	ands	r3, r0
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037f4:	481f      	ldr	r0, [pc, #124]	; (8003874 <__NVIC_SetPriority+0xd4>)
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	b25b      	sxtb	r3, r3
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	430a      	orrs	r2, r1
 8003800:	33c0      	adds	r3, #192	; 0xc0
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	501a      	str	r2, [r3, r0]
}
 8003806:	e031      	b.n	800386c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003808:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <__NVIC_SetPriority+0xd8>)
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	0019      	movs	r1, r3
 8003810:	230f      	movs	r3, #15
 8003812:	400b      	ands	r3, r1
 8003814:	3b08      	subs	r3, #8
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3306      	adds	r3, #6
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	18d3      	adds	r3, r2, r3
 800381e:	3304      	adds	r3, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	1dfa      	adds	r2, r7, #7
 8003824:	7812      	ldrb	r2, [r2, #0]
 8003826:	0011      	movs	r1, r2
 8003828:	2203      	movs	r2, #3
 800382a:	400a      	ands	r2, r1
 800382c:	00d2      	lsls	r2, r2, #3
 800382e:	21ff      	movs	r1, #255	; 0xff
 8003830:	4091      	lsls	r1, r2
 8003832:	000a      	movs	r2, r1
 8003834:	43d2      	mvns	r2, r2
 8003836:	401a      	ands	r2, r3
 8003838:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	22ff      	movs	r2, #255	; 0xff
 8003840:	401a      	ands	r2, r3
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	0018      	movs	r0, r3
 8003848:	2303      	movs	r3, #3
 800384a:	4003      	ands	r3, r0
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003850:	4809      	ldr	r0, [pc, #36]	; (8003878 <__NVIC_SetPriority+0xd8>)
 8003852:	1dfb      	adds	r3, r7, #7
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	001c      	movs	r4, r3
 8003858:	230f      	movs	r3, #15
 800385a:	4023      	ands	r3, r4
 800385c:	3b08      	subs	r3, #8
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	430a      	orrs	r2, r1
 8003862:	3306      	adds	r3, #6
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	18c3      	adds	r3, r0, r3
 8003868:	3304      	adds	r3, #4
 800386a:	601a      	str	r2, [r3, #0]
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b003      	add	sp, #12
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	e000e100 	.word	0xe000e100
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <SysTick_Handler+0x1c>)
 8003882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003884:	f001 fb90 	bl	8004fa8 <xTaskGetSchedulerState>
 8003888:	0003      	movs	r3, r0
 800388a:	2b01      	cmp	r3, #1
 800388c:	d001      	beq.n	8003892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800388e:	f002 f863 	bl	8005958 <xPortSysTickHandler>
  }
}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	e000e010 	.word	0xe000e010

0800389c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80038a0:	2305      	movs	r3, #5
 80038a2:	425b      	negs	r3, r3
 80038a4:	2100      	movs	r1, #0
 80038a6:	0018      	movs	r0, r3
 80038a8:	f7ff ff7a 	bl	80037a0 <__NVIC_SetPriority>
#endif
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038ba:	f3ef 8305 	mrs	r3, IPSR
 80038be:	603b      	str	r3, [r7, #0]
  return(result);
 80038c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80038c6:	2306      	movs	r3, #6
 80038c8:	425b      	negs	r3, r3
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	e00c      	b.n	80038e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038ce:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <osKernelInitialize+0x40>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d105      	bne.n	80038e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <osKernelInitialize+0x40>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038dc:	2300      	movs	r3, #0
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	e002      	b.n	80038e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80038e2:	2301      	movs	r3, #1
 80038e4:	425b      	negs	r3, r3
 80038e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038e8:	687b      	ldr	r3, [r7, #4]
}
 80038ea:	0018      	movs	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	2000002c 	.word	0x2000002c

080038f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038fe:	f3ef 8305 	mrs	r3, IPSR
 8003902:	603b      	str	r3, [r7, #0]
  return(result);
 8003904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800390a:	2306      	movs	r3, #6
 800390c:	425b      	negs	r3, r3
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	e010      	b.n	8003934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <osKernelStart+0x48>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d109      	bne.n	800392e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800391a:	f7ff ffbf 	bl	800389c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <osKernelStart+0x48>)
 8003920:	2202      	movs	r2, #2
 8003922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003924:	f000 ff6e 	bl	8004804 <vTaskStartScheduler>
      stat = osOK;
 8003928:	2300      	movs	r3, #0
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	e002      	b.n	8003934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800392e:	2301      	movs	r3, #1
 8003930:	425b      	negs	r3, r3
 8003932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003934:	687b      	ldr	r3, [r7, #4]
}
 8003936:	0018      	movs	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000002c 	.word	0x2000002c

08003944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b08e      	sub	sp, #56	; 0x38
 8003948:	af04      	add	r7, sp, #16
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003954:	f3ef 8305 	mrs	r3, IPSR
 8003958:	617b      	str	r3, [r7, #20]
  return(result);
 800395a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800395c:	2b00      	cmp	r3, #0
 800395e:	d000      	beq.n	8003962 <osThreadNew+0x1e>
 8003960:	e081      	b.n	8003a66 <osThreadNew+0x122>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d100      	bne.n	800396a <osThreadNew+0x26>
 8003968:	e07d      	b.n	8003a66 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800396e:	2318      	movs	r3, #24
 8003970:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003976:	2301      	movs	r3, #1
 8003978:	425b      	negs	r3, r3
 800397a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d044      	beq.n	8003a0c <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <osThreadNew+0x4c>
        name = attr->name;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <osThreadNew+0x70>
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b38      	cmp	r3, #56	; 0x38
 80039a8:	d804      	bhi.n	80039b4 <osThreadNew+0x70>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	4013      	ands	r3, r2
 80039b2:	d001      	beq.n	80039b8 <osThreadNew+0x74>
        return (NULL);
 80039b4:	2300      	movs	r3, #0
 80039b6:	e057      	b.n	8003a68 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	089b      	lsrs	r3, r3, #2
 80039c6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00e      	beq.n	80039ee <osThreadNew+0xaa>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b5b      	cmp	r3, #91	; 0x5b
 80039d6:	d90a      	bls.n	80039ee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d006      	beq.n	80039ee <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <osThreadNew+0xaa>
        mem = 1;
 80039e8:	2301      	movs	r3, #1
 80039ea:	61bb      	str	r3, [r7, #24]
 80039ec:	e010      	b.n	8003a10 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10c      	bne.n	8003a10 <osThreadNew+0xcc>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d108      	bne.n	8003a10 <osThreadNew+0xcc>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <osThreadNew+0xcc>
          mem = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e001      	b.n	8003a10 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d112      	bne.n	8003a3c <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a1e:	68bd      	ldr	r5, [r7, #8]
 8003a20:	6a3c      	ldr	r4, [r7, #32]
 8003a22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	9302      	str	r3, [sp, #8]
 8003a28:	9201      	str	r2, [sp, #4]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	002b      	movs	r3, r5
 8003a30:	0022      	movs	r2, r4
 8003a32:	f000 fd3e 	bl	80044b2 <xTaskCreateStatic>
 8003a36:	0003      	movs	r3, r0
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	e014      	b.n	8003a66 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d111      	bne.n	8003a66 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68bc      	ldr	r4, [r7, #8]
 8003a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	0023      	movs	r3, r4
 8003a58:	f000 fd6f 	bl	800453a <xTaskCreate>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d001      	beq.n	8003a66 <osThreadNew+0x122>
            hTask = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a66:	693b      	ldr	r3, [r7, #16]
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b00a      	add	sp, #40	; 0x28
 8003a6e:	bdb0      	pop	{r4, r5, r7, pc}

08003a70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a78:	f3ef 8305 	mrs	r3, IPSR
 8003a7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <osDelay+0x1c>
    stat = osErrorISR;
 8003a84:	2306      	movs	r3, #6
 8003a86:	425b      	negs	r3, r3
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e008      	b.n	8003a9e <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <osDelay+0x2e>
      vTaskDelay(ticks);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 fe8d 	bl	80047b8 <vTaskDelay>
    }
  }

  return (stat);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	b004      	add	sp, #16
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a06      	ldr	r2, [pc, #24]	; (8003ad0 <vApplicationGetIdleTaskMemory+0x28>)
 8003ab8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4a05      	ldr	r2, [pc, #20]	; (8003ad4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003abe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2280      	movs	r2, #128	; 0x80
 8003ac4:	601a      	str	r2, [r3, #0]
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b004      	add	sp, #16
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	20000030 	.word	0x20000030
 8003ad4:	2000008c 	.word	0x2000008c

08003ad8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <vApplicationGetTimerTaskMemory+0x28>)
 8003ae8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4a05      	ldr	r2, [pc, #20]	; (8003b04 <vApplicationGetTimerTaskMemory+0x2c>)
 8003aee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2280      	movs	r2, #128	; 0x80
 8003af4:	0052      	lsls	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b004      	add	sp, #16
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	2000028c 	.word	0x2000028c
 8003b04:	200002e8 	.word	0x200002e8

08003b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3308      	adds	r3, #8
 8003b14:	001a      	movs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	4252      	negs	r2, r2
 8003b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3308      	adds	r3, #8
 8003b26:	001a      	movs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	001a      	movs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b002      	add	sp, #8
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b002      	add	sp, #8
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b004      	add	sp, #16
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	d103      	bne.n	8003bbc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e00c      	b.n	8003bd6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e002      	b.n	8003bca <vListInsert+0x2c>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d2f6      	bcs.n	8003bc4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b004      	add	sp, #16
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6892      	ldr	r2, [r2, #8]
 8003c20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6852      	ldr	r2, [r2, #4]
 8003c2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d103      	bne.n	8003c3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	1e5a      	subs	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b084      	sub	sp, #16
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <xQueueGenericReset+0x18>
 8003c6e:	b672      	cpsid	i
 8003c70:	e7fe      	b.n	8003c70 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003c72:	f001 fe15 	bl	80058a0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	434b      	muls	r3, r1
 8003c84:	18d2      	adds	r2, r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca0:	1e59      	subs	r1, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	434b      	muls	r3, r1
 8003ca8:	18d2      	adds	r2, r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2244      	movs	r2, #68	; 0x44
 8003cb2:	21ff      	movs	r1, #255	; 0xff
 8003cb4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2245      	movs	r2, #69	; 0x45
 8003cba:	21ff      	movs	r1, #255	; 0xff
 8003cbc:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10d      	bne.n	8003ce0 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3310      	adds	r3, #16
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 ffd7 	bl	8004c84 <xTaskRemoveFromEventList>
 8003cd6:	1e03      	subs	r3, r0, #0
 8003cd8:	d00c      	beq.n	8003cf4 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003cda:	f001 fdd1 	bl	8005880 <vPortYield>
 8003cde:	e009      	b.n	8003cf4 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3310      	adds	r3, #16
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f7ff ff0f 	bl	8003b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3324      	adds	r3, #36	; 0x24
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7ff ff0a 	bl	8003b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cf4:	f001 fde6 	bl	80058c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cf8:	2301      	movs	r3, #1
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b004      	add	sp, #16
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d02:	b590      	push	{r4, r7, lr}
 8003d04:	b089      	sub	sp, #36	; 0x24
 8003d06:	af02      	add	r7, sp, #8
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <xQueueGenericCreateStatic+0x18>
 8003d16:	b672      	cpsid	i
 8003d18:	e7fe      	b.n	8003d18 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <xQueueGenericCreateStatic+0x22>
 8003d20:	b672      	cpsid	i
 8003d22:	e7fe      	b.n	8003d22 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <xQueueGenericCreateStatic+0x2e>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <xQueueGenericCreateStatic+0x32>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <xQueueGenericCreateStatic+0x34>
 8003d34:	2300      	movs	r3, #0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <xQueueGenericCreateStatic+0x3c>
 8003d3a:	b672      	cpsid	i
 8003d3c:	e7fe      	b.n	8003d3c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <xQueueGenericCreateStatic+0x48>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <xQueueGenericCreateStatic+0x4c>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <xQueueGenericCreateStatic+0x4e>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <xQueueGenericCreateStatic+0x56>
 8003d54:	b672      	cpsid	i
 8003d56:	e7fe      	b.n	8003d56 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d58:	2350      	movs	r3, #80	; 0x50
 8003d5a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b50      	cmp	r3, #80	; 0x50
 8003d60:	d001      	beq.n	8003d66 <xQueueGenericCreateStatic+0x64>
 8003d62:	b672      	cpsid	i
 8003d64:	e7fe      	b.n	8003d64 <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d66:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00e      	beq.n	8003d90 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2246      	movs	r2, #70	; 0x46
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d7a:	2328      	movs	r3, #40	; 0x28
 8003d7c:	18fb      	adds	r3, r7, r3
 8003d7e:	781c      	ldrb	r4, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	0023      	movs	r3, r4
 8003d8c:	f000 f805 	bl	8003d9a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d90:	697b      	ldr	r3, [r7, #20]
	}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b007      	add	sp, #28
 8003d98:	bd90      	pop	{r4, r7, pc}

08003d9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b084      	sub	sp, #16
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	001a      	movs	r2, r3
 8003da8:	1cfb      	adds	r3, r7, #3
 8003daa:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e002      	b.n	8003dc0 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2101      	movs	r1, #1
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff ff42 	bl	8003c5a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	1cfa      	adds	r2, r7, #3
 8003dda:	214c      	movs	r1, #76	; 0x4c
 8003ddc:	7812      	ldrb	r2, [r2, #0]
 8003dde:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <xQueueGenericSend+0x20>
 8003e04:	b672      	cpsid	i
 8003e06:	e7fe      	b.n	8003e06 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d103      	bne.n	8003e16 <xQueueGenericSend+0x2e>
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <xQueueGenericSend+0x32>
 8003e16:	2301      	movs	r3, #1
 8003e18:	e000      	b.n	8003e1c <xQueueGenericSend+0x34>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <xQueueGenericSend+0x3c>
 8003e20:	b672      	cpsid	i
 8003e22:	e7fe      	b.n	8003e22 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d103      	bne.n	8003e32 <xQueueGenericSend+0x4a>
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <xQueueGenericSend+0x4e>
 8003e32:	2301      	movs	r3, #1
 8003e34:	e000      	b.n	8003e38 <xQueueGenericSend+0x50>
 8003e36:	2300      	movs	r3, #0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <xQueueGenericSend+0x58>
 8003e3c:	b672      	cpsid	i
 8003e3e:	e7fe      	b.n	8003e3e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e40:	f001 f8b2 	bl	8004fa8 <xTaskGetSchedulerState>
 8003e44:	1e03      	subs	r3, r0, #0
 8003e46:	d102      	bne.n	8003e4e <xQueueGenericSend+0x66>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <xQueueGenericSend+0x6a>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueGenericSend+0x6c>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <xQueueGenericSend+0x74>
 8003e58:	b672      	cpsid	i
 8003e5a:	e7fe      	b.n	8003e5a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e5c:	f001 fd20 	bl	80058a0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d302      	bcc.n	8003e72 <xQueueGenericSend+0x8a>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d11e      	bne.n	8003eb0 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f000 f9a2 	bl	80041c2 <prvCopyDataToQueue>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	3324      	adds	r3, #36	; 0x24
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f000 fef8 	bl	8004c84 <xTaskRemoveFromEventList>
 8003e94:	1e03      	subs	r3, r0, #0
 8003e96:	d007      	beq.n	8003ea8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e98:	f001 fcf2 	bl	8005880 <vPortYield>
 8003e9c:	e004      	b.n	8003ea8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ea4:	f001 fcec 	bl	8005880 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ea8:	f001 fd0c 	bl	80058c4 <vPortExitCritical>
				return pdPASS;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e05b      	b.n	8003f68 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eb6:	f001 fd05 	bl	80058c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e054      	b.n	8003f68 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ec4:	2314      	movs	r3, #20
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f000 ff37 	bl	8004d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ed2:	f001 fcf7 	bl	80058c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ed6:	f000 fce9 	bl	80048ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eda:	f001 fce1 	bl	80058a0 <vPortEnterCritical>
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	2244      	movs	r2, #68	; 0x44
 8003ee2:	5c9b      	ldrb	r3, [r3, r2]
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	d103      	bne.n	8003ef2 <xQueueGenericSend+0x10a>
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	2244      	movs	r2, #68	; 0x44
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	2245      	movs	r2, #69	; 0x45
 8003ef6:	5c9b      	ldrb	r3, [r3, r2]
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	d103      	bne.n	8003f06 <xQueueGenericSend+0x11e>
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2245      	movs	r2, #69	; 0x45
 8003f02:	2100      	movs	r1, #0
 8003f04:	5499      	strb	r1, [r3, r2]
 8003f06:	f001 fcdd 	bl	80058c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f0a:	1d3a      	adds	r2, r7, #4
 8003f0c:	2314      	movs	r3, #20
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	0011      	movs	r1, r2
 8003f12:	0018      	movs	r0, r3
 8003f14:	f000 ff26 	bl	8004d64 <xTaskCheckForTimeOut>
 8003f18:	1e03      	subs	r3, r0, #0
 8003f1a:	d11e      	bne.n	8003f5a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f000 fa54 	bl	80043cc <prvIsQueueFull>
 8003f24:	1e03      	subs	r3, r0, #0
 8003f26:	d011      	beq.n	8003f4c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	3310      	adds	r3, #16
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 fe63 	bl	8004bfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 f9d3 	bl	80042e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f3e:	f000 fcc1 	bl	80048c4 <xTaskResumeAll>
 8003f42:	1e03      	subs	r3, r0, #0
 8003f44:	d18a      	bne.n	8003e5c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003f46:	f001 fc9b 	bl	8005880 <vPortYield>
 8003f4a:	e787      	b.n	8003e5c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 f9c8 	bl	80042e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f54:	f000 fcb6 	bl	80048c4 <xTaskResumeAll>
 8003f58:	e780      	b.n	8003e5c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 f9c1 	bl	80042e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f62:	f000 fcaf 	bl	80048c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b00a      	add	sp, #40	; 0x28
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b08b      	sub	sp, #44	; 0x2c
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <xQueueGenericSendFromISR+0x1c>
 8003f88:	b672      	cpsid	i
 8003f8a:	e7fe      	b.n	8003f8a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <xQueueGenericSendFromISR+0x2a>
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <xQueueGenericSendFromISR+0x2e>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e000      	b.n	8003fa0 <xQueueGenericSendFromISR+0x30>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <xQueueGenericSendFromISR+0x38>
 8003fa4:	b672      	cpsid	i
 8003fa6:	e7fe      	b.n	8003fa6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d103      	bne.n	8003fb6 <xQueueGenericSendFromISR+0x46>
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <xQueueGenericSendFromISR+0x4a>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <xQueueGenericSendFromISR+0x4c>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <xQueueGenericSendFromISR+0x54>
 8003fc0:	b672      	cpsid	i
 8003fc2:	e7fe      	b.n	8003fc2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fc4:	f001 fc96 	bl	80058f4 <ulSetInterruptMaskFromISR>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d302      	bcc.n	8003fde <xQueueGenericSendFromISR+0x6e>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d131      	bne.n	8004042 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fde:	241b      	movs	r4, #27
 8003fe0:	193b      	adds	r3, r7, r4
 8003fe2:	6a3a      	ldr	r2, [r7, #32]
 8003fe4:	2145      	movs	r1, #69	; 0x45
 8003fe6:	5c52      	ldrb	r2, [r2, r1]
 8003fe8:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 f8e3 	bl	80041c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ffc:	193b      	adds	r3, r7, r4
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b25b      	sxtb	r3, r3
 8004002:	3301      	adds	r3, #1
 8004004:	d111      	bne.n	800402a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d016      	beq.n	800403c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	3324      	adds	r3, #36	; 0x24
 8004012:	0018      	movs	r0, r3
 8004014:	f000 fe36 	bl	8004c84 <xTaskRemoveFromEventList>
 8004018:	1e03      	subs	r3, r0, #0
 800401a:	d00f      	beq.n	800403c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00c      	beq.n	800403c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e008      	b.n	800403c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800402a:	231b      	movs	r3, #27
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	b259      	sxtb	r1, r3
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	2245      	movs	r2, #69	; 0x45
 800403a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800403c:	2301      	movs	r3, #1
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8004040:	e001      	b.n	8004046 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004042:	2300      	movs	r3, #0
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	0018      	movs	r0, r3
 800404a:	f001 fc59 	bl	8005900 <vClearInterruptMaskFromISR>

	return xReturn;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	b00b      	add	sp, #44	; 0x2c
 8004056:	bd90      	pop	{r4, r7, pc}

08004058 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004064:	2300      	movs	r3, #0
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <xQueueReceive+0x1e>
 8004072:	b672      	cpsid	i
 8004074:	e7fe      	b.n	8004074 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d103      	bne.n	8004084 <xQueueReceive+0x2c>
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <xQueueReceive+0x30>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <xQueueReceive+0x32>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <xQueueReceive+0x3a>
 800408e:	b672      	cpsid	i
 8004090:	e7fe      	b.n	8004090 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004092:	f000 ff89 	bl	8004fa8 <xTaskGetSchedulerState>
 8004096:	1e03      	subs	r3, r0, #0
 8004098:	d102      	bne.n	80040a0 <xQueueReceive+0x48>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <xQueueReceive+0x4c>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <xQueueReceive+0x4e>
 80040a4:	2300      	movs	r3, #0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <xQueueReceive+0x56>
 80040aa:	b672      	cpsid	i
 80040ac:	e7fe      	b.n	80040ac <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040ae:	f001 fbf7 	bl	80058a0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01a      	beq.n	80040f4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	0011      	movs	r1, r2
 80040c4:	0018      	movs	r0, r3
 80040c6:	f000 f8e7 	bl	8004298 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	1e5a      	subs	r2, r3, #1
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	3310      	adds	r3, #16
 80040de:	0018      	movs	r0, r3
 80040e0:	f000 fdd0 	bl	8004c84 <xTaskRemoveFromEventList>
 80040e4:	1e03      	subs	r3, r0, #0
 80040e6:	d001      	beq.n	80040ec <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040e8:	f001 fbca 	bl	8005880 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80040ec:	f001 fbea 	bl	80058c4 <vPortExitCritical>
				return pdPASS;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e062      	b.n	80041ba <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040fa:	f001 fbe3 	bl	80058c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040fe:	2300      	movs	r3, #0
 8004100:	e05b      	b.n	80041ba <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004108:	2314      	movs	r3, #20
 800410a:	18fb      	adds	r3, r7, r3
 800410c:	0018      	movs	r0, r3
 800410e:	f000 fe15 	bl	8004d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004112:	2301      	movs	r3, #1
 8004114:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004116:	f001 fbd5 	bl	80058c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800411a:	f000 fbc7 	bl	80048ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800411e:	f001 fbbf 	bl	80058a0 <vPortEnterCritical>
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	2244      	movs	r2, #68	; 0x44
 8004126:	5c9b      	ldrb	r3, [r3, r2]
 8004128:	b25b      	sxtb	r3, r3
 800412a:	3301      	adds	r3, #1
 800412c:	d103      	bne.n	8004136 <xQueueReceive+0xde>
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	2244      	movs	r2, #68	; 0x44
 8004132:	2100      	movs	r1, #0
 8004134:	5499      	strb	r1, [r3, r2]
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	2245      	movs	r2, #69	; 0x45
 800413a:	5c9b      	ldrb	r3, [r3, r2]
 800413c:	b25b      	sxtb	r3, r3
 800413e:	3301      	adds	r3, #1
 8004140:	d103      	bne.n	800414a <xQueueReceive+0xf2>
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	2245      	movs	r2, #69	; 0x45
 8004146:	2100      	movs	r1, #0
 8004148:	5499      	strb	r1, [r3, r2]
 800414a:	f001 fbbb 	bl	80058c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800414e:	1d3a      	adds	r2, r7, #4
 8004150:	2314      	movs	r3, #20
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	0011      	movs	r1, r2
 8004156:	0018      	movs	r0, r3
 8004158:	f000 fe04 	bl	8004d64 <xTaskCheckForTimeOut>
 800415c:	1e03      	subs	r3, r0, #0
 800415e:	d11e      	bne.n	800419e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	0018      	movs	r0, r3
 8004164:	f000 f91c 	bl	80043a0 <prvIsQueueEmpty>
 8004168:	1e03      	subs	r3, r0, #0
 800416a:	d011      	beq.n	8004190 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	3324      	adds	r3, #36	; 0x24
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	0011      	movs	r1, r2
 8004174:	0018      	movs	r0, r3
 8004176:	f000 fd41 	bl	8004bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 f8b1 	bl	80042e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004182:	f000 fb9f 	bl	80048c4 <xTaskResumeAll>
 8004186:	1e03      	subs	r3, r0, #0
 8004188:	d191      	bne.n	80040ae <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800418a:	f001 fb79 	bl	8005880 <vPortYield>
 800418e:	e78e      	b.n	80040ae <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	0018      	movs	r0, r3
 8004194:	f000 f8a6 	bl	80042e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004198:	f000 fb94 	bl	80048c4 <xTaskResumeAll>
 800419c:	e787      	b.n	80040ae <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	0018      	movs	r0, r3
 80041a2:	f000 f89f 	bl	80042e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041a6:	f000 fb8d 	bl	80048c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f000 f8f7 	bl	80043a0 <prvIsQueueEmpty>
 80041b2:	1e03      	subs	r3, r0, #0
 80041b4:	d100      	bne.n	80041b8 <xQueueReceive+0x160>
 80041b6:	e77a      	b.n	80040ae <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b00a      	add	sp, #40	; 0x28
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10e      	bne.n	80041fe <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d14e      	bne.n	8004286 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 fef7 	bl	8004fe0 <xTaskPriorityDisinherit>
 80041f2:	0003      	movs	r3, r0
 80041f4:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	e043      	b.n	8004286 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d119      	bne.n	8004238 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6858      	ldr	r0, [r3, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	0019      	movs	r1, r3
 8004210:	f001 fdb4 	bl	8005d7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	18d2      	adds	r2, r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	d32b      	bcc.n	8004286 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	e026      	b.n	8004286 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68d8      	ldr	r0, [r3, #12]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	0019      	movs	r1, r3
 8004244:	f001 fd9a 	bl	8005d7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	425b      	negs	r3, r3
 8004252:	18d2      	adds	r2, r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d207      	bcs.n	8004274 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	425b      	negs	r3, r3
 800426e:	18d2      	adds	r2, r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d105      	bne.n	8004286 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3b01      	subs	r3, #1
 8004284:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800428e:	697b      	ldr	r3, [r7, #20]
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	b006      	add	sp, #24
 8004296:	bd80      	pop	{r7, pc}

08004298 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d018      	beq.n	80042dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	18d2      	adds	r2, r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d303      	bcc.n	80042cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68d9      	ldr	r1, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f001 fd50 	bl	8005d7c <memcpy>
	}
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80042ec:	f001 fad8 	bl	80058a0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80042f0:	230f      	movs	r3, #15
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	2145      	movs	r1, #69	; 0x45
 80042f8:	5c52      	ldrb	r2, [r2, r1]
 80042fa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042fc:	e013      	b.n	8004326 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	2b00      	cmp	r3, #0
 8004304:	d016      	beq.n	8004334 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3324      	adds	r3, #36	; 0x24
 800430a:	0018      	movs	r0, r3
 800430c:	f000 fcba 	bl	8004c84 <xTaskRemoveFromEventList>
 8004310:	1e03      	subs	r3, r0, #0
 8004312:	d001      	beq.n	8004318 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004314:	f000 fd76 	bl	8004e04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004318:	210f      	movs	r1, #15
 800431a:	187b      	adds	r3, r7, r1
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	b2da      	uxtb	r2, r3
 8004322:	187b      	adds	r3, r7, r1
 8004324:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004326:	230f      	movs	r3, #15
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b25b      	sxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	dce5      	bgt.n	80042fe <prvUnlockQueue+0x1a>
 8004332:	e000      	b.n	8004336 <prvUnlockQueue+0x52>
					break;
 8004334:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2245      	movs	r2, #69	; 0x45
 800433a:	21ff      	movs	r1, #255	; 0xff
 800433c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800433e:	f001 fac1 	bl	80058c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004342:	f001 faad 	bl	80058a0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004346:	230e      	movs	r3, #14
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	2144      	movs	r1, #68	; 0x44
 800434e:	5c52      	ldrb	r2, [r2, r1]
 8004350:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004352:	e013      	b.n	800437c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d016      	beq.n	800438a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	0018      	movs	r0, r3
 8004362:	f000 fc8f 	bl	8004c84 <xTaskRemoveFromEventList>
 8004366:	1e03      	subs	r3, r0, #0
 8004368:	d001      	beq.n	800436e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800436a:	f000 fd4b 	bl	8004e04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800436e:	210e      	movs	r1, #14
 8004370:	187b      	adds	r3, r7, r1
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	3b01      	subs	r3, #1
 8004376:	b2da      	uxtb	r2, r3
 8004378:	187b      	adds	r3, r7, r1
 800437a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800437c:	230e      	movs	r3, #14
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b25b      	sxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	dce5      	bgt.n	8004354 <prvUnlockQueue+0x70>
 8004388:	e000      	b.n	800438c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800438a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2244      	movs	r2, #68	; 0x44
 8004390:	21ff      	movs	r1, #255	; 0xff
 8004392:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004394:	f001 fa96 	bl	80058c4 <vPortExitCritical>
}
 8004398:	46c0      	nop			; (mov r8, r8)
 800439a:	46bd      	mov	sp, r7
 800439c:	b004      	add	sp, #16
 800439e:	bd80      	pop	{r7, pc}

080043a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043a8:	f001 fa7a 	bl	80058a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e001      	b.n	80043be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043be:	f001 fa81 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 80043c2:	68fb      	ldr	r3, [r7, #12]
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b004      	add	sp, #16
 80043ca:	bd80      	pop	{r7, pc}

080043cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043d4:	f001 fa64 	bl	80058a0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d102      	bne.n	80043ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043e4:	2301      	movs	r3, #1
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	e001      	b.n	80043ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043ee:	f001 fa69 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 80043f2:	68fb      	ldr	r3, [r7, #12]
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b004      	add	sp, #16
 80043fa:	bd80      	pop	{r7, pc}

080043fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	e015      	b.n	8004438 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <vQueueAddToRegistry+0x4c>)
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	00d2      	lsls	r2, r2, #3
 8004412:	58d3      	ldr	r3, [r2, r3]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10c      	bne.n	8004432 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004418:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <vQueueAddToRegistry+0x4c>)
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	00d2      	lsls	r2, r2, #3
 800441e:	6839      	ldr	r1, [r7, #0]
 8004420:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <vQueueAddToRegistry+0x4c>)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	18d3      	adds	r3, r2, r3
 800442a:	3304      	adds	r3, #4
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004430:	e005      	b.n	800443e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3301      	adds	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b07      	cmp	r3, #7
 800443c:	d9e6      	bls.n	800440c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	46bd      	mov	sp, r7
 8004442:	b004      	add	sp, #16
 8004444:	bd80      	pop	{r7, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	200014d8 	.word	0x200014d8

0800444c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800445c:	f001 fa20 	bl	80058a0 <vPortEnterCritical>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2244      	movs	r2, #68	; 0x44
 8004464:	5c9b      	ldrb	r3, [r3, r2]
 8004466:	b25b      	sxtb	r3, r3
 8004468:	3301      	adds	r3, #1
 800446a:	d103      	bne.n	8004474 <vQueueWaitForMessageRestricted+0x28>
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2244      	movs	r2, #68	; 0x44
 8004470:	2100      	movs	r1, #0
 8004472:	5499      	strb	r1, [r3, r2]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2245      	movs	r2, #69	; 0x45
 8004478:	5c9b      	ldrb	r3, [r3, r2]
 800447a:	b25b      	sxtb	r3, r3
 800447c:	3301      	adds	r3, #1
 800447e:	d103      	bne.n	8004488 <vQueueWaitForMessageRestricted+0x3c>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2245      	movs	r2, #69	; 0x45
 8004484:	2100      	movs	r1, #0
 8004486:	5499      	strb	r1, [r3, r2]
 8004488:	f001 fa1c 	bl	80058c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3324      	adds	r3, #36	; 0x24
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	0018      	movs	r0, r3
 800449e:	f000 fbcb 	bl	8004c38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f7ff ff1d 	bl	80042e4 <prvUnlockQueue>
	}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b006      	add	sp, #24
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044b2:	b590      	push	{r4, r7, lr}
 80044b4:	b08d      	sub	sp, #52	; 0x34
 80044b6:	af04      	add	r7, sp, #16
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <xTaskCreateStatic+0x18>
 80044c6:	b672      	cpsid	i
 80044c8:	e7fe      	b.n	80044c8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <xTaskCreateStatic+0x22>
 80044d0:	b672      	cpsid	i
 80044d2:	e7fe      	b.n	80044d2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044d4:	235c      	movs	r3, #92	; 0x5c
 80044d6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b5c      	cmp	r3, #92	; 0x5c
 80044dc:	d001      	beq.n	80044e2 <xTaskCreateStatic+0x30>
 80044de:	b672      	cpsid	i
 80044e0:	e7fe      	b.n	80044e0 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044e2:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d020      	beq.n	800452c <xTaskCreateStatic+0x7a>
 80044ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01d      	beq.n	800452c <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2259      	movs	r2, #89	; 0x59
 80044fe:	2102      	movs	r1, #2
 8004500:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004502:	683c      	ldr	r4, [r7, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	2300      	movs	r3, #0
 800450c:	9303      	str	r3, [sp, #12]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	9302      	str	r3, [sp, #8]
 8004512:	2318      	movs	r3, #24
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	0023      	movs	r3, r4
 800451e:	f000 f859 	bl	80045d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f8df 	bl	80046e8 <prvAddNewTaskToReadyList>
 800452a:	e001      	b.n	8004530 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 800452c:	2300      	movs	r3, #0
 800452e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004530:	69bb      	ldr	r3, [r7, #24]
	}
 8004532:	0018      	movs	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	b009      	add	sp, #36	; 0x24
 8004538:	bd90      	pop	{r4, r7, pc}

0800453a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800453a:	b590      	push	{r4, r7, lr}
 800453c:	b08d      	sub	sp, #52	; 0x34
 800453e:	af04      	add	r7, sp, #16
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	603b      	str	r3, [r7, #0]
 8004546:	1dbb      	adds	r3, r7, #6
 8004548:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800454a:	1dbb      	adds	r3, r7, #6
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	0018      	movs	r0, r3
 8004552:	f001 fa3d 	bl	80059d0 <pvPortMalloc>
 8004556:	0003      	movs	r3, r0
 8004558:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d010      	beq.n	8004582 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004560:	205c      	movs	r0, #92	; 0x5c
 8004562:	f001 fa35 	bl	80059d0 <pvPortMalloc>
 8004566:	0003      	movs	r3, r0
 8004568:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
 8004576:	e006      	b.n	8004586 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	0018      	movs	r0, r3
 800457c:	f001 fad4 	bl	8005b28 <vPortFree>
 8004580:	e001      	b.n	8004586 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01a      	beq.n	80045c2 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2259      	movs	r2, #89	; 0x59
 8004590:	2100      	movs	r1, #0
 8004592:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004594:	1dbb      	adds	r3, r7, #6
 8004596:	881a      	ldrh	r2, [r3, #0]
 8004598:	683c      	ldr	r4, [r7, #0]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	2300      	movs	r3, #0
 80045a0:	9303      	str	r3, [sp, #12]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	9302      	str	r3, [sp, #8]
 80045a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	0023      	movs	r3, r4
 80045b0:	f000 f810 	bl	80045d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 f896 	bl	80046e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045bc:	2301      	movs	r3, #1
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e002      	b.n	80045c8 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045c2:	2301      	movs	r3, #1
 80045c4:	425b      	negs	r3, r3
 80045c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045c8:	69bb      	ldr	r3, [r7, #24]
	}
 80045ca:	0018      	movs	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b009      	add	sp, #36	; 0x24
 80045d0:	bd90      	pop	{r4, r7, pc}
	...

080045d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	001a      	movs	r2, r3
 80045ec:	21a5      	movs	r1, #165	; 0xa5
 80045ee:	f001 fbce 	bl	8005d8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	493a      	ldr	r1, [pc, #232]	; (80046e4 <prvInitialiseNewTask+0x110>)
 80045fa:	468c      	mov	ip, r1
 80045fc:	4463      	add	r3, ip
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	18d3      	adds	r3, r2, r3
 8004602:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2207      	movs	r2, #7
 8004608:	4393      	bics	r3, r2
 800460a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2207      	movs	r2, #7
 8004610:	4013      	ands	r3, r2
 8004612:	d001      	beq.n	8004618 <prvInitialiseNewTask+0x44>
 8004614:	b672      	cpsid	i
 8004616:	e7fe      	b.n	8004616 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d020      	beq.n	8004660 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e013      	b.n	800464c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	18d3      	adds	r3, r2, r3
 800462a:	7818      	ldrb	r0, [r3, #0]
 800462c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800462e:	2134      	movs	r1, #52	; 0x34
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	18d3      	adds	r3, r2, r3
 8004634:	185b      	adds	r3, r3, r1
 8004636:	1c02      	adds	r2, r0, #0
 8004638:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	18d3      	adds	r3, r2, r3
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	3301      	adds	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b0f      	cmp	r3, #15
 8004650:	d9e8      	bls.n	8004624 <prvInitialiseNewTask+0x50>
 8004652:	e000      	b.n	8004656 <prvInitialiseNewTask+0x82>
			{
				break;
 8004654:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	2243      	movs	r2, #67	; 0x43
 800465a:	2100      	movs	r1, #0
 800465c:	5499      	strb	r1, [r3, r2]
 800465e:	e003      	b.n	8004668 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	2234      	movs	r2, #52	; 0x34
 8004664:	2100      	movs	r1, #0
 8004666:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2b37      	cmp	r3, #55	; 0x37
 800466c:	d901      	bls.n	8004672 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800466e:	2337      	movs	r3, #55	; 0x37
 8004670:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	6a3a      	ldr	r2, [r7, #32]
 800467c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	2200      	movs	r2, #0
 8004682:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	3304      	adds	r3, #4
 8004688:	0018      	movs	r0, r3
 800468a:	f7ff fa5b 	bl	8003b44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004690:	3318      	adds	r3, #24
 8004692:	0018      	movs	r0, r3
 8004694:	f7ff fa56 	bl	8003b44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	2238      	movs	r2, #56	; 0x38
 80046a2:	1ad2      	subs	r2, r2, r3
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	2200      	movs	r2, #0
 80046b2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	2258      	movs	r2, #88	; 0x58
 80046b8:	2100      	movs	r1, #0
 80046ba:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	68f9      	ldr	r1, [r7, #12]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	0018      	movs	r0, r3
 80046c4:	f001 f854 	bl	8005770 <pxPortInitialiseStack>
 80046c8:	0002      	movs	r2, r0
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	b006      	add	sp, #24
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	3fffffff 	.word	0x3fffffff

080046e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046f0:	f001 f8d6 	bl	80058a0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046f4:	4b2a      	ldr	r3, [pc, #168]	; (80047a0 <prvAddNewTaskToReadyList+0xb8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	4b29      	ldr	r3, [pc, #164]	; (80047a0 <prvAddNewTaskToReadyList+0xb8>)
 80046fc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80046fe:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <prvAddNewTaskToReadyList+0xbc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004706:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <prvAddNewTaskToReadyList+0xbc>)
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800470c:	4b24      	ldr	r3, [pc, #144]	; (80047a0 <prvAddNewTaskToReadyList+0xb8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d110      	bne.n	8004736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004714:	f000 fb90 	bl	8004e38 <prvInitialiseTaskLists>
 8004718:	e00d      	b.n	8004736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800471a:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <prvAddNewTaskToReadyList+0xc0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004722:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <prvAddNewTaskToReadyList+0xbc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	429a      	cmp	r2, r3
 800472e:	d802      	bhi.n	8004736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004730:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <prvAddNewTaskToReadyList+0xbc>)
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004736:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <prvAddNewTaskToReadyList+0xc4>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <prvAddNewTaskToReadyList+0xc4>)
 800473e:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <prvAddNewTaskToReadyList+0xc4>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474c:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <prvAddNewTaskToReadyList+0xc8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	429a      	cmp	r2, r3
 8004752:	d903      	bls.n	800475c <prvAddNewTaskToReadyList+0x74>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <prvAddNewTaskToReadyList+0xc8>)
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	0013      	movs	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	189b      	adds	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <prvAddNewTaskToReadyList+0xcc>)
 800476a:	189a      	adds	r2, r3, r2
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3304      	adds	r3, #4
 8004770:	0019      	movs	r1, r3
 8004772:	0010      	movs	r0, r2
 8004774:	f7ff f9f1 	bl	8003b5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004778:	f001 f8a4 	bl	80058c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <prvAddNewTaskToReadyList+0xc0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d008      	beq.n	8004796 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <prvAddNewTaskToReadyList+0xbc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	429a      	cmp	r2, r3
 8004790:	d201      	bcs.n	8004796 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004792:	f001 f875 	bl	8005880 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	46bd      	mov	sp, r7
 800479a:	b002      	add	sp, #8
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	20000bbc 	.word	0x20000bbc
 80047a4:	200006e8 	.word	0x200006e8
 80047a8:	20000bc8 	.word	0x20000bc8
 80047ac:	20000bd8 	.word	0x20000bd8
 80047b0:	20000bc4 	.word	0x20000bc4
 80047b4:	200006ec 	.word	0x200006ec

080047b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047ca:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <vTaskDelay+0x48>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <vTaskDelay+0x1e>
 80047d2:	b672      	cpsid	i
 80047d4:	e7fe      	b.n	80047d4 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80047d6:	f000 f869 	bl	80048ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2100      	movs	r1, #0
 80047de:	0018      	movs	r0, r3
 80047e0:	f000 fc5a 	bl	8005098 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047e4:	f000 f86e 	bl	80048c4 <xTaskResumeAll>
 80047e8:	0003      	movs	r3, r0
 80047ea:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80047f2:	f001 f845 	bl	8005880 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b004      	add	sp, #16
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	20000be4 	.word	0x20000be4

08004804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004812:	003a      	movs	r2, r7
 8004814:	1d39      	adds	r1, r7, #4
 8004816:	2308      	movs	r3, #8
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	0018      	movs	r0, r3
 800481c:	f7ff f944 	bl	8003aa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004820:	683c      	ldr	r4, [r7, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	491b      	ldr	r1, [pc, #108]	; (8004894 <vTaskStartScheduler+0x90>)
 8004828:	481b      	ldr	r0, [pc, #108]	; (8004898 <vTaskStartScheduler+0x94>)
 800482a:	9202      	str	r2, [sp, #8]
 800482c:	9301      	str	r3, [sp, #4]
 800482e:	2300      	movs	r3, #0
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	0022      	movs	r2, r4
 8004836:	f7ff fe3c 	bl	80044b2 <xTaskCreateStatic>
 800483a:	0002      	movs	r2, r0
 800483c:	4b17      	ldr	r3, [pc, #92]	; (800489c <vTaskStartScheduler+0x98>)
 800483e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004840:	4b16      	ldr	r3, [pc, #88]	; (800489c <vTaskStartScheduler+0x98>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004848:	2301      	movs	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	e001      	b.n	8004852 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d103      	bne.n	8004860 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004858:	f000 fc72 	bl	8005140 <xTimerCreateTimerTask>
 800485c:	0003      	movs	r3, r0
 800485e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10d      	bne.n	8004882 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004866:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <vTaskStartScheduler+0x9c>)
 800486a:	2201      	movs	r2, #1
 800486c:	4252      	negs	r2, r2
 800486e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <vTaskStartScheduler+0xa0>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <vTaskStartScheduler+0xa4>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800487c:	f000 ffdc 	bl	8005838 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004880:	e004      	b.n	800488c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3301      	adds	r3, #1
 8004886:	d101      	bne.n	800488c <vTaskStartScheduler+0x88>
 8004888:	b672      	cpsid	i
 800488a:	e7fe      	b.n	800488a <vTaskStartScheduler+0x86>
}
 800488c:	46c0      	nop			; (mov r8, r8)
 800488e:	46bd      	mov	sp, r7
 8004890:	b005      	add	sp, #20
 8004892:	bd90      	pop	{r4, r7, pc}
 8004894:	08005dc4 	.word	0x08005dc4
 8004898:	08004e19 	.word	0x08004e19
 800489c:	20000be0 	.word	0x20000be0
 80048a0:	20000bdc 	.word	0x20000bdc
 80048a4:	20000bc8 	.word	0x20000bc8
 80048a8:	20000bc0 	.word	0x20000bc0

080048ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048b0:	4b03      	ldr	r3, [pc, #12]	; (80048c0 <vTaskSuspendAll+0x14>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	4b02      	ldr	r3, [pc, #8]	; (80048c0 <vTaskSuspendAll+0x14>)
 80048b8:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000be4 	.word	0x20000be4

080048c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048d2:	4b3a      	ldr	r3, [pc, #232]	; (80049bc <xTaskResumeAll+0xf8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <xTaskResumeAll+0x1a>
 80048da:	b672      	cpsid	i
 80048dc:	e7fe      	b.n	80048dc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048de:	f000 ffdf 	bl	80058a0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80048e2:	4b36      	ldr	r3, [pc, #216]	; (80049bc <xTaskResumeAll+0xf8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	4b34      	ldr	r3, [pc, #208]	; (80049bc <xTaskResumeAll+0xf8>)
 80048ea:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ec:	4b33      	ldr	r3, [pc, #204]	; (80049bc <xTaskResumeAll+0xf8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d15b      	bne.n	80049ac <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048f4:	4b32      	ldr	r3, [pc, #200]	; (80049c0 <xTaskResumeAll+0xfc>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d057      	beq.n	80049ac <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048fc:	e02f      	b.n	800495e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048fe:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <xTaskResumeAll+0x100>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3318      	adds	r3, #24
 800490a:	0018      	movs	r0, r3
 800490c:	f7ff f97d 	bl	8003c0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3304      	adds	r3, #4
 8004914:	0018      	movs	r0, r3
 8004916:	f7ff f978 	bl	8003c0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800491e:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <xTaskResumeAll+0x104>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d903      	bls.n	800492e <xTaskResumeAll+0x6a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492a:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <xTaskResumeAll+0x104>)
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004932:	0013      	movs	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	189b      	adds	r3, r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4a24      	ldr	r2, [pc, #144]	; (80049cc <xTaskResumeAll+0x108>)
 800493c:	189a      	adds	r2, r3, r2
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3304      	adds	r3, #4
 8004942:	0019      	movs	r1, r3
 8004944:	0010      	movs	r0, r2
 8004946:	f7ff f908 	bl	8003b5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <xTaskResumeAll+0x10c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004958:	4b1e      	ldr	r3, [pc, #120]	; (80049d4 <xTaskResumeAll+0x110>)
 800495a:	2201      	movs	r2, #1
 800495c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800495e:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <xTaskResumeAll+0x100>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1cb      	bne.n	80048fe <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800496c:	f000 fafe 	bl	8004f6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004970:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <xTaskResumeAll+0x114>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00f      	beq.n	800499c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800497c:	f000 f83c 	bl	80049f8 <xTaskIncrementTick>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d002      	beq.n	800498a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004984:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <xTaskResumeAll+0x110>)
 8004986:	2201      	movs	r2, #1
 8004988:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3b01      	subs	r3, #1
 800498e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f2      	bne.n	800497c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <xTaskResumeAll+0x114>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800499c:	4b0d      	ldr	r3, [pc, #52]	; (80049d4 <xTaskResumeAll+0x110>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049a4:	2301      	movs	r3, #1
 80049a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049a8:	f000 ff6a 	bl	8005880 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049ac:	f000 ff8a 	bl	80058c4 <vPortExitCritical>

	return xAlreadyYielded;
 80049b0:	68bb      	ldr	r3, [r7, #8]
}
 80049b2:	0018      	movs	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b004      	add	sp, #16
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	20000be4 	.word	0x20000be4
 80049c0:	20000bbc 	.word	0x20000bbc
 80049c4:	20000b7c 	.word	0x20000b7c
 80049c8:	20000bc4 	.word	0x20000bc4
 80049cc:	200006ec 	.word	0x200006ec
 80049d0:	200006e8 	.word	0x200006e8
 80049d4:	20000bd0 	.word	0x20000bd0
 80049d8:	20000bcc 	.word	0x20000bcc

080049dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80049e2:	4b04      	ldr	r3, [pc, #16]	; (80049f4 <xTaskGetTickCount+0x18>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80049e8:	687b      	ldr	r3, [r7, #4]
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	20000bc0 	.word	0x20000bc0

080049f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a02:	4b4a      	ldr	r3, [pc, #296]	; (8004b2c <xTaskIncrementTick+0x134>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d000      	beq.n	8004a0c <xTaskIncrementTick+0x14>
 8004a0a:	e084      	b.n	8004b16 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a0c:	4b48      	ldr	r3, [pc, #288]	; (8004b30 <xTaskIncrementTick+0x138>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a14:	4b46      	ldr	r3, [pc, #280]	; (8004b30 <xTaskIncrementTick+0x138>)
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d117      	bne.n	8004a50 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a20:	4b44      	ldr	r3, [pc, #272]	; (8004b34 <xTaskIncrementTick+0x13c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <xTaskIncrementTick+0x36>
 8004a2a:	b672      	cpsid	i
 8004a2c:	e7fe      	b.n	8004a2c <xTaskIncrementTick+0x34>
 8004a2e:	4b41      	ldr	r3, [pc, #260]	; (8004b34 <xTaskIncrementTick+0x13c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	60fb      	str	r3, [r7, #12]
 8004a34:	4b40      	ldr	r3, [pc, #256]	; (8004b38 <xTaskIncrementTick+0x140>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <xTaskIncrementTick+0x13c>)
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	4b3e      	ldr	r3, [pc, #248]	; (8004b38 <xTaskIncrementTick+0x140>)
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <xTaskIncrementTick+0x144>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	4b3c      	ldr	r3, [pc, #240]	; (8004b3c <xTaskIncrementTick+0x144>)
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	f000 fa8e 	bl	8004f6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a50:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <xTaskIncrementTick+0x148>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d349      	bcc.n	8004aee <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a5a:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <xTaskIncrementTick+0x13c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a64:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <xTaskIncrementTick+0x148>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	4252      	negs	r2, r2
 8004a6a:	601a      	str	r2, [r3, #0]
					break;
 8004a6c:	e03f      	b.n	8004aee <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6e:	4b31      	ldr	r3, [pc, #196]	; (8004b34 <xTaskIncrementTick+0x13c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d203      	bcs.n	8004a8e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a86:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <xTaskIncrementTick+0x148>)
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a8c:	e02f      	b.n	8004aee <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	3304      	adds	r3, #4
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7ff f8b9 	bl	8003c0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	3318      	adds	r3, #24
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7ff f8b0 	bl	8003c0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aae:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <xTaskIncrementTick+0x14c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d903      	bls.n	8004abe <xTaskIncrementTick+0xc6>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <xTaskIncrementTick+0x14c>)
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac2:	0013      	movs	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4a1f      	ldr	r2, [pc, #124]	; (8004b48 <xTaskIncrementTick+0x150>)
 8004acc:	189a      	adds	r2, r3, r2
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	0019      	movs	r1, r3
 8004ad4:	0010      	movs	r0, r2
 8004ad6:	f7ff f840 	bl	8003b5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ade:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <xTaskIncrementTick+0x154>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d3b8      	bcc.n	8004a5a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aec:	e7b5      	b.n	8004a5a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aee:	4b17      	ldr	r3, [pc, #92]	; (8004b4c <xTaskIncrementTick+0x154>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af4:	4914      	ldr	r1, [pc, #80]	; (8004b48 <xTaskIncrementTick+0x150>)
 8004af6:	0013      	movs	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	189b      	adds	r3, r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	585b      	ldr	r3, [r3, r1]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d901      	bls.n	8004b08 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8004b04:	2301      	movs	r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b08:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <xTaskIncrementTick+0x158>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004b10:	2301      	movs	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e004      	b.n	8004b20 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b16:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <xTaskIncrementTick+0x15c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <xTaskIncrementTick+0x15c>)
 8004b1e:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b20:	697b      	ldr	r3, [r7, #20]
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b006      	add	sp, #24
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	20000be4 	.word	0x20000be4
 8004b30:	20000bc0 	.word	0x20000bc0
 8004b34:	20000b74 	.word	0x20000b74
 8004b38:	20000b78 	.word	0x20000b78
 8004b3c:	20000bd4 	.word	0x20000bd4
 8004b40:	20000bdc 	.word	0x20000bdc
 8004b44:	20000bc4 	.word	0x20000bc4
 8004b48:	200006ec 	.word	0x200006ec
 8004b4c:	200006e8 	.word	0x200006e8
 8004b50:	20000bd0 	.word	0x20000bd0
 8004b54:	20000bcc 	.word	0x20000bcc

08004b58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b5e:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <vTaskSwitchContext+0x90>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b66:	4b21      	ldr	r3, [pc, #132]	; (8004bec <vTaskSwitchContext+0x94>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b6c:	e037      	b.n	8004bde <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004b6e:	4b1f      	ldr	r3, [pc, #124]	; (8004bec <vTaskSwitchContext+0x94>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b74:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <vTaskSwitchContext+0x98>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	e007      	b.n	8004b8c <vTaskSwitchContext+0x34>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <vTaskSwitchContext+0x2e>
 8004b82:	b672      	cpsid	i
 8004b84:	e7fe      	b.n	8004b84 <vTaskSwitchContext+0x2c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	4919      	ldr	r1, [pc, #100]	; (8004bf4 <vTaskSwitchContext+0x9c>)
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	0013      	movs	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	585b      	ldr	r3, [r3, r1]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0ee      	beq.n	8004b7c <vTaskSwitchContext+0x24>
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	0013      	movs	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	189b      	adds	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <vTaskSwitchContext+0x9c>)
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	605a      	str	r2, [r3, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d104      	bne.n	8004bce <vTaskSwitchContext+0x76>
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	605a      	str	r2, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <vTaskSwitchContext+0xa0>)
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <vTaskSwitchContext+0x98>)
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b002      	add	sp, #8
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	20000be4 	.word	0x20000be4
 8004bec:	20000bd0 	.word	0x20000bd0
 8004bf0:	20000bc4 	.word	0x20000bc4
 8004bf4:	200006ec 	.word	0x200006ec
 8004bf8:	200006e8 	.word	0x200006e8

08004bfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <vTaskPlaceOnEventList+0x14>
 8004c0c:	b672      	cpsid	i
 8004c0e:	e7fe      	b.n	8004c0e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <vTaskPlaceOnEventList+0x38>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3318      	adds	r3, #24
 8004c16:	001a      	movs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	0011      	movs	r1, r2
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7fe ffbe 	bl	8003b9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2101      	movs	r1, #1
 8004c26:	0018      	movs	r0, r3
 8004c28:	f000 fa36 	bl	8005098 <prvAddCurrentTaskToDelayedList>
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b002      	add	sp, #8
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200006e8 	.word	0x200006e8

08004c38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <vTaskPlaceOnEventListRestricted+0x16>
 8004c4a:	b672      	cpsid	i
 8004c4c:	e7fe      	b.n	8004c4c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <vTaskPlaceOnEventListRestricted+0x48>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3318      	adds	r3, #24
 8004c54:	001a      	movs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	0011      	movs	r1, r2
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f7fe ff7d 	bl	8003b5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8004c66:	2301      	movs	r3, #1
 8004c68:	425b      	negs	r3, r3
 8004c6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	0011      	movs	r1, r2
 8004c72:	0018      	movs	r0, r3
 8004c74:	f000 fa10 	bl	8005098 <prvAddCurrentTaskToDelayedList>
	}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b004      	add	sp, #16
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	200006e8 	.word	0x200006e8

08004c84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <xTaskRemoveFromEventList+0x1a>
 8004c9a:	b672      	cpsid	i
 8004c9c:	e7fe      	b.n	8004c9c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	3318      	adds	r3, #24
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f7fe ffb1 	bl	8003c0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ca8:	4b1e      	ldr	r3, [pc, #120]	; (8004d24 <xTaskRemoveFromEventList+0xa0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d11d      	bne.n	8004cec <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f7fe ffa8 	bl	8003c0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <xTaskRemoveFromEventList+0xa4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d903      	bls.n	8004cce <xTaskRemoveFromEventList+0x4a>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <xTaskRemoveFromEventList+0xa4>)
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd2:	0013      	movs	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4a14      	ldr	r2, [pc, #80]	; (8004d2c <xTaskRemoveFromEventList+0xa8>)
 8004cdc:	189a      	adds	r2, r3, r2
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	0010      	movs	r0, r2
 8004ce6:	f7fe ff38 	bl	8003b5a <vListInsertEnd>
 8004cea:	e007      	b.n	8004cfc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	3318      	adds	r3, #24
 8004cf0:	001a      	movs	r2, r3
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <xTaskRemoveFromEventList+0xac>)
 8004cf4:	0011      	movs	r1, r2
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f7fe ff2f 	bl	8003b5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <xTaskRemoveFromEventList+0xb0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d905      	bls.n	8004d16 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <xTaskRemoveFromEventList+0xb4>)
 8004d10:	2201      	movs	r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	e001      	b.n	8004d1a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b004      	add	sp, #16
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	20000be4 	.word	0x20000be4
 8004d28:	20000bc4 	.word	0x20000bc4
 8004d2c:	200006ec 	.word	0x200006ec
 8004d30:	20000b7c 	.word	0x20000b7c
 8004d34:	200006e8 	.word	0x200006e8
 8004d38:	20000bd0 	.word	0x20000bd0

08004d3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <vTaskInternalSetTimeOutState+0x20>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <vTaskInternalSetTimeOutState+0x24>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	605a      	str	r2, [r3, #4]
}
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b002      	add	sp, #8
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000bd4 	.word	0x20000bd4
 8004d60:	20000bc0 	.word	0x20000bc0

08004d64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <xTaskCheckForTimeOut+0x14>
 8004d74:	b672      	cpsid	i
 8004d76:	e7fe      	b.n	8004d76 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <xTaskCheckForTimeOut+0x1e>
 8004d7e:	b672      	cpsid	i
 8004d80:	e7fe      	b.n	8004d80 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004d82:	f000 fd8d 	bl	80058a0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d86:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <xTaskCheckForTimeOut+0x98>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	d102      	bne.n	8004da4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e024      	b.n	8004dee <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <xTaskCheckForTimeOut+0x9c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d007      	beq.n	8004dc0 <xTaskCheckForTimeOut+0x5c>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d302      	bcc.n	8004dc0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e016      	b.n	8004dee <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d20c      	bcs.n	8004de4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1ad2      	subs	r2, r2, r3
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7ff ffaf 	bl	8004d3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e004      	b.n	8004dee <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dea:	2301      	movs	r3, #1
 8004dec:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004dee:	f000 fd69 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 8004df2:	697b      	ldr	r3, [r7, #20]
}
 8004df4:	0018      	movs	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b006      	add	sp, #24
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20000bc0 	.word	0x20000bc0
 8004e00:	20000bd4 	.word	0x20000bd4

08004e04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e08:	4b02      	ldr	r3, [pc, #8]	; (8004e14 <vTaskMissedYield+0x10>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]
}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000bd0 	.word	0x20000bd0

08004e18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e20:	f000 f84e 	bl	8004ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <prvIdleTask+0x1c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d9f9      	bls.n	8004e20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e2c:	f000 fd28 	bl	8005880 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004e30:	e7f6      	b.n	8004e20 <prvIdleTask+0x8>
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	200006ec 	.word	0x200006ec

08004e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	e00c      	b.n	8004e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	0013      	movs	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <prvInitialiseTaskLists+0x68>)
 8004e50:	189b      	adds	r3, r3, r2
 8004e52:	0018      	movs	r0, r3
 8004e54:	f7fe fe58 	bl	8003b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b37      	cmp	r3, #55	; 0x37
 8004e62:	d9ef      	bls.n	8004e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <prvInitialiseTaskLists+0x6c>)
 8004e66:	0018      	movs	r0, r3
 8004e68:	f7fe fe4e 	bl	8003b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <prvInitialiseTaskLists+0x70>)
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f7fe fe4a 	bl	8003b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e74:	4b0d      	ldr	r3, [pc, #52]	; (8004eac <prvInitialiseTaskLists+0x74>)
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7fe fe46 	bl	8003b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <prvInitialiseTaskLists+0x78>)
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f7fe fe42 	bl	8003b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <prvInitialiseTaskLists+0x7c>)
 8004e86:	0018      	movs	r0, r3
 8004e88:	f7fe fe3e 	bl	8003b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <prvInitialiseTaskLists+0x80>)
 8004e8e:	4a05      	ldr	r2, [pc, #20]	; (8004ea4 <prvInitialiseTaskLists+0x6c>)
 8004e90:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <prvInitialiseTaskLists+0x84>)
 8004e94:	4a04      	ldr	r2, [pc, #16]	; (8004ea8 <prvInitialiseTaskLists+0x70>)
 8004e96:	601a      	str	r2, [r3, #0]
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	200006ec 	.word	0x200006ec
 8004ea4:	20000b4c 	.word	0x20000b4c
 8004ea8:	20000b60 	.word	0x20000b60
 8004eac:	20000b7c 	.word	0x20000b7c
 8004eb0:	20000b90 	.word	0x20000b90
 8004eb4:	20000ba8 	.word	0x20000ba8
 8004eb8:	20000b74 	.word	0x20000b74
 8004ebc:	20000b78 	.word	0x20000b78

08004ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ec6:	e01a      	b.n	8004efe <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004ec8:	f000 fcea 	bl	80058a0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ecc:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <prvCheckTasksWaitingTermination+0x50>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7fe fe96 	bl	8003c0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <prvCheckTasksWaitingTermination+0x54>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	1e5a      	subs	r2, r3, #1
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <prvCheckTasksWaitingTermination+0x54>)
 8004ee6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <prvCheckTasksWaitingTermination+0x58>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	1e5a      	subs	r2, r3, #1
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <prvCheckTasksWaitingTermination+0x58>)
 8004ef0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004ef2:	f000 fce7 	bl	80058c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f000 f80f 	bl	8004f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <prvCheckTasksWaitingTermination+0x58>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e0      	bne.n	8004ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	20000b90 	.word	0x20000b90
 8004f14:	20000bbc 	.word	0x20000bbc
 8004f18:	20000ba4 	.word	0x20000ba4

08004f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2259      	movs	r2, #89	; 0x59
 8004f28:	5c9b      	ldrb	r3, [r3, r2]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	0018      	movs	r0, r3
 8004f34:	f000 fdf8 	bl	8005b28 <vPortFree>
				vPortFree( pxTCB );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f000 fdf4 	bl	8005b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f40:	e010      	b.n	8004f64 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2259      	movs	r2, #89	; 0x59
 8004f46:	5c9b      	ldrb	r3, [r3, r2]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d104      	bne.n	8004f56 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f000 fdea 	bl	8005b28 <vPortFree>
	}
 8004f54:	e006      	b.n	8004f64 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2259      	movs	r2, #89	; 0x59
 8004f5a:	5c9b      	ldrb	r3, [r3, r2]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d001      	beq.n	8004f64 <prvDeleteTCB+0x48>
 8004f60:	b672      	cpsid	i
 8004f62:	e7fe      	b.n	8004f62 <prvDeleteTCB+0x46>
	}
 8004f64:	46c0      	nop			; (mov r8, r8)
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <prvResetNextTaskUnblockTime+0x34>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f7c:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <prvResetNextTaskUnblockTime+0x38>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4252      	negs	r2, r2
 8004f82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f84:	e008      	b.n	8004f98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <prvResetNextTaskUnblockTime+0x34>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <prvResetNextTaskUnblockTime+0x38>)
 8004f96:	601a      	str	r2, [r3, #0]
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20000b74 	.word	0x20000b74
 8004fa4:	20000bdc 	.word	0x20000bdc

08004fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fae:	4b0a      	ldr	r3, [pc, #40]	; (8004fd8 <xTaskGetSchedulerState+0x30>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	607b      	str	r3, [r7, #4]
 8004fba:	e008      	b.n	8004fce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <xTaskGetSchedulerState+0x34>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	e001      	b.n	8004fce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fce:	687b      	ldr	r3, [r7, #4]
	}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20000bc8 	.word	0x20000bc8
 8004fdc:	20000be4 	.word	0x20000be4

08004fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d044      	beq.n	8005080 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ff6:	4b25      	ldr	r3, [pc, #148]	; (800508c <xTaskPriorityDisinherit+0xac>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <xTaskPriorityDisinherit+0x24>
 8005000:	b672      	cpsid	i
 8005002:	e7fe      	b.n	8005002 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <xTaskPriorityDisinherit+0x30>
 800500c:	b672      	cpsid	i
 800500e:	e7fe      	b.n	800500e <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005014:	1e5a      	subs	r2, r3, #1
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	429a      	cmp	r2, r3
 8005024:	d02c      	beq.n	8005080 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502a:	2b00      	cmp	r3, #0
 800502c:	d128      	bne.n	8005080 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	3304      	adds	r3, #4
 8005032:	0018      	movs	r0, r3
 8005034:	f7fe fde9 	bl	8003c0a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	2238      	movs	r2, #56	; 0x38
 8005046:	1ad2      	subs	r2, r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005050:	4b0f      	ldr	r3, [pc, #60]	; (8005090 <xTaskPriorityDisinherit+0xb0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d903      	bls.n	8005060 <xTaskPriorityDisinherit+0x80>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <xTaskPriorityDisinherit+0xb0>)
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005064:	0013      	movs	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	189b      	adds	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4a09      	ldr	r2, [pc, #36]	; (8005094 <xTaskPriorityDisinherit+0xb4>)
 800506e:	189a      	adds	r2, r3, r2
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	3304      	adds	r3, #4
 8005074:	0019      	movs	r1, r3
 8005076:	0010      	movs	r0, r2
 8005078:	f7fe fd6f 	bl	8003b5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005080:	68fb      	ldr	r3, [r7, #12]
	}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	b004      	add	sp, #16
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	200006e8 	.word	0x200006e8
 8005090:	20000bc4 	.word	0x20000bc4
 8005094:	200006ec 	.word	0x200006ec

08005098 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050a2:	4b21      	ldr	r3, [pc, #132]	; (8005128 <prvAddCurrentTaskToDelayedList+0x90>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050a8:	4b20      	ldr	r3, [pc, #128]	; (800512c <prvAddCurrentTaskToDelayedList+0x94>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3304      	adds	r3, #4
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7fe fdab 	bl	8003c0a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3301      	adds	r3, #1
 80050b8:	d10b      	bne.n	80050d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c0:	4b1a      	ldr	r3, [pc, #104]	; (800512c <prvAddCurrentTaskToDelayedList+0x94>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	1d1a      	adds	r2, r3, #4
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <prvAddCurrentTaskToDelayedList+0x98>)
 80050c8:	0011      	movs	r1, r2
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7fe fd45 	bl	8003b5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050d0:	e026      	b.n	8005120 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	18d3      	adds	r3, r2, r3
 80050d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <prvAddCurrentTaskToDelayedList+0x94>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d209      	bcs.n	80050fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ea:	4b12      	ldr	r3, [pc, #72]	; (8005134 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <prvAddCurrentTaskToDelayedList+0x94>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3304      	adds	r3, #4
 80050f4:	0019      	movs	r1, r3
 80050f6:	0010      	movs	r0, r2
 80050f8:	f7fe fd51 	bl	8003b9e <vListInsert>
}
 80050fc:	e010      	b.n	8005120 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050fe:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <prvAddCurrentTaskToDelayedList+0x94>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3304      	adds	r3, #4
 8005108:	0019      	movs	r1, r3
 800510a:	0010      	movs	r0, r2
 800510c:	f7fe fd47 	bl	8003b9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	d202      	bcs.n	8005120 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800511a:	4b08      	ldr	r3, [pc, #32]	; (800513c <prvAddCurrentTaskToDelayedList+0xa4>)
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	601a      	str	r2, [r3, #0]
}
 8005120:	46c0      	nop			; (mov r8, r8)
 8005122:	46bd      	mov	sp, r7
 8005124:	b004      	add	sp, #16
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000bc0 	.word	0x20000bc0
 800512c:	200006e8 	.word	0x200006e8
 8005130:	20000ba8 	.word	0x20000ba8
 8005134:	20000b78 	.word	0x20000b78
 8005138:	20000b74 	.word	0x20000b74
 800513c:	20000bdc 	.word	0x20000bdc

08005140 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005140:	b590      	push	{r4, r7, lr}
 8005142:	b089      	sub	sp, #36	; 0x24
 8005144:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800514a:	f000 facd 	bl	80056e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800514e:	4b17      	ldr	r3, [pc, #92]	; (80051ac <xTimerCreateTimerTask+0x6c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d020      	beq.n	8005198 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800515e:	003a      	movs	r2, r7
 8005160:	1d39      	adds	r1, r7, #4
 8005162:	2308      	movs	r3, #8
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	0018      	movs	r0, r3
 8005168:	f7fe fcb6 	bl	8003ad8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800516c:	683c      	ldr	r4, [r7, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	490f      	ldr	r1, [pc, #60]	; (80051b0 <xTimerCreateTimerTask+0x70>)
 8005174:	480f      	ldr	r0, [pc, #60]	; (80051b4 <xTimerCreateTimerTask+0x74>)
 8005176:	9202      	str	r2, [sp, #8]
 8005178:	9301      	str	r3, [sp, #4]
 800517a:	2302      	movs	r3, #2
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	0022      	movs	r2, r4
 8005182:	f7ff f996 	bl	80044b2 <xTaskCreateStatic>
 8005186:	0002      	movs	r2, r0
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <xTimerCreateTimerTask+0x78>)
 800518a:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800518c:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <xTimerCreateTimerTask+0x78>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8005194:	2301      	movs	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <xTimerCreateTimerTask+0x62>
 800519e:	b672      	cpsid	i
 80051a0:	e7fe      	b.n	80051a0 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80051a2:	68fb      	ldr	r3, [r7, #12]
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b005      	add	sp, #20
 80051aa:	bd90      	pop	{r4, r7, pc}
 80051ac:	20000c18 	.word	0x20000c18
 80051b0:	08005dcc 	.word	0x08005dcc
 80051b4:	080052dd 	.word	0x080052dd
 80051b8:	20000c1c 	.word	0x20000c1c

080051bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <xTimerGenericCommand+0x1c>
 80051d4:	b672      	cpsid	i
 80051d6:	e7fe      	b.n	80051d6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051d8:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <xTimerGenericCommand+0x94>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d031      	beq.n	8005244 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051e0:	2114      	movs	r1, #20
 80051e2:	187b      	adds	r3, r7, r1
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	dc1a      	bgt.n	8005230 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051fa:	f7ff fed5 	bl	8004fa8 <xTaskGetSchedulerState>
 80051fe:	0003      	movs	r3, r0
 8005200:	2b02      	cmp	r3, #2
 8005202:	d10a      	bne.n	800521a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005204:	4b12      	ldr	r3, [pc, #72]	; (8005250 <xTimerGenericCommand+0x94>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520a:	2314      	movs	r3, #20
 800520c:	18f9      	adds	r1, r7, r3
 800520e:	2300      	movs	r3, #0
 8005210:	f7fe fdea 	bl	8003de8 <xQueueGenericSend>
 8005214:	0003      	movs	r3, r0
 8005216:	627b      	str	r3, [r7, #36]	; 0x24
 8005218:	e014      	b.n	8005244 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800521a:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <xTimerGenericCommand+0x94>)
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	2314      	movs	r3, #20
 8005220:	18f9      	adds	r1, r7, r3
 8005222:	2300      	movs	r3, #0
 8005224:	2200      	movs	r2, #0
 8005226:	f7fe fddf 	bl	8003de8 <xQueueGenericSend>
 800522a:	0003      	movs	r3, r0
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	e009      	b.n	8005244 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <xTimerGenericCommand+0x94>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	2314      	movs	r3, #20
 8005238:	18f9      	adds	r1, r7, r3
 800523a:	2300      	movs	r3, #0
 800523c:	f7fe fe98 	bl	8003f70 <xQueueGenericSendFromISR>
 8005240:	0003      	movs	r3, r0
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b00a      	add	sp, #40	; 0x28
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	20000c18 	.word	0x20000c18

08005254 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af02      	add	r7, sp, #8
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800525e:	4b1e      	ldr	r3, [pc, #120]	; (80052d8 <prvProcessExpiredTimer+0x84>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3304      	adds	r3, #4
 800526c:	0018      	movs	r0, r3
 800526e:	f7fe fccc 	bl	8003c0a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2228      	movs	r2, #40	; 0x28
 8005276:	5c9b      	ldrb	r3, [r3, r2]
 8005278:	001a      	movs	r2, r3
 800527a:	2304      	movs	r3, #4
 800527c:	4013      	ands	r3, r2
 800527e:	d019      	beq.n	80052b4 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	699a      	ldr	r2, [r3, #24]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	18d1      	adds	r1, r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f8c3 	bl	8005418 <prvInsertTimerInActiveList>
 8005292:	1e03      	subs	r3, r0, #0
 8005294:	d017      	beq.n	80052c6 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	2300      	movs	r3, #0
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2300      	movs	r3, #0
 80052a0:	2100      	movs	r1, #0
 80052a2:	f7ff ff8b 	bl	80051bc <xTimerGenericCommand>
 80052a6:	0003      	movs	r3, r0
 80052a8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <prvProcessExpiredTimer+0x72>
 80052b0:	b672      	cpsid	i
 80052b2:	e7fe      	b.n	80052b2 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2228      	movs	r2, #40	; 0x28
 80052b8:	5c9b      	ldrb	r3, [r3, r2]
 80052ba:	2201      	movs	r2, #1
 80052bc:	4393      	bics	r3, r2
 80052be:	b2d9      	uxtb	r1, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2228      	movs	r2, #40	; 0x28
 80052c4:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	0010      	movs	r0, r2
 80052ce:	4798      	blx	r3
}
 80052d0:	46c0      	nop			; (mov r8, r8)
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b004      	add	sp, #16
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000c10 	.word	0x20000c10

080052dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052e4:	2308      	movs	r3, #8
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 f853 	bl	8005394 <prvGetNextExpireTime>
 80052ee:	0003      	movs	r3, r0
 80052f0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	0011      	movs	r1, r2
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 f803 	bl	8005304 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052fe:	f000 f8cd 	bl	800549c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005302:	e7ef      	b.n	80052e4 <prvTimerTask+0x8>

08005304 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800530e:	f7ff facd 	bl	80048ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005312:	2308      	movs	r3, #8
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	0018      	movs	r0, r3
 8005318:	f000 f85e 	bl	80053d8 <prvSampleTimeNow>
 800531c:	0003      	movs	r3, r0
 800531e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d12b      	bne.n	800537e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10c      	bne.n	8005346 <prvProcessTimerOrBlockTask+0x42>
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	429a      	cmp	r2, r3
 8005332:	d808      	bhi.n	8005346 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005334:	f7ff fac6 	bl	80048c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	0011      	movs	r1, r2
 800533e:	0018      	movs	r0, r3
 8005340:	f7ff ff88 	bl	8005254 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005344:	e01d      	b.n	8005382 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <prvProcessTimerOrBlockTask+0x88>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <prvProcessTimerOrBlockTask+0x56>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <prvProcessTimerOrBlockTask+0x58>
 800535a:	2300      	movs	r3, #0
 800535c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <prvProcessTimerOrBlockTask+0x8c>)
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	0019      	movs	r1, r3
 800536c:	f7ff f86e 	bl	800444c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005370:	f7ff faa8 	bl	80048c4 <xTaskResumeAll>
 8005374:	1e03      	subs	r3, r0, #0
 8005376:	d104      	bne.n	8005382 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8005378:	f000 fa82 	bl	8005880 <vPortYield>
}
 800537c:	e001      	b.n	8005382 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800537e:	f7ff faa1 	bl	80048c4 <xTaskResumeAll>
}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	46bd      	mov	sp, r7
 8005386:	b004      	add	sp, #16
 8005388:	bd80      	pop	{r7, pc}
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	20000c14 	.word	0x20000c14
 8005390:	20000c18 	.word	0x20000c18

08005394 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <prvGetNextExpireTime+0x40>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <prvGetNextExpireTime+0x16>
 80053a6:	2201      	movs	r2, #1
 80053a8:	e000      	b.n	80053ac <prvGetNextExpireTime+0x18>
 80053aa:	2200      	movs	r2, #0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <prvGetNextExpireTime+0x40>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e001      	b.n	80053c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053c8:	68fb      	ldr	r3, [r7, #12]
}
 80053ca:	0018      	movs	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b004      	add	sp, #16
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	20000c10 	.word	0x20000c10

080053d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053e0:	f7ff fafc 	bl	80049dc <xTaskGetTickCount>
 80053e4:	0003      	movs	r3, r0
 80053e6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <prvSampleTimeNow+0x3c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d205      	bcs.n	80053fe <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80053f2:	f000 f91b 	bl	800562c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e002      	b.n	8005404 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <prvSampleTimeNow+0x3c>)
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800540a:	68fb      	ldr	r3, [r7, #12]
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b004      	add	sp, #16
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000c20 	.word	0x20000c20

08005418 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005426:	2300      	movs	r3, #0
 8005428:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	429a      	cmp	r2, r3
 800543c:	d812      	bhi.n	8005464 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	429a      	cmp	r2, r3
 800544a:	d302      	bcc.n	8005452 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800544c:	2301      	movs	r3, #1
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e01b      	b.n	800548a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <prvInsertTimerInActiveList+0x7c>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3304      	adds	r3, #4
 800545a:	0019      	movs	r1, r3
 800545c:	0010      	movs	r0, r2
 800545e:	f7fe fb9e 	bl	8003b9e <vListInsert>
 8005462:	e012      	b.n	800548a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d206      	bcs.n	800547a <prvInsertTimerInActiveList+0x62>
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d302      	bcc.n	800547a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e007      	b.n	800548a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800547a:	4b07      	ldr	r3, [pc, #28]	; (8005498 <prvInsertTimerInActiveList+0x80>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3304      	adds	r3, #4
 8005482:	0019      	movs	r1, r3
 8005484:	0010      	movs	r0, r2
 8005486:	f7fe fb8a 	bl	8003b9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800548a:	697b      	ldr	r3, [r7, #20]
}
 800548c:	0018      	movs	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	b006      	add	sp, #24
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000c14 	.word	0x20000c14
 8005498:	20000c10 	.word	0x20000c10

0800549c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	; 0x30
 80054a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054a2:	e0af      	b.n	8005604 <prvProcessReceivedCommands+0x168>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054a4:	2308      	movs	r3, #8
 80054a6:	18fb      	adds	r3, r7, r3
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da10      	bge.n	80054d0 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054ae:	2308      	movs	r3, #8
 80054b0:	18fb      	adds	r3, r7, r3
 80054b2:	3304      	adds	r3, #4
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <prvProcessReceivedCommands+0x24>
 80054bc:	b672      	cpsid	i
 80054be:	e7fe      	b.n	80054be <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	6858      	ldr	r0, [r3, #4]
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	0019      	movs	r1, r3
 80054ce:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054d0:	2308      	movs	r3, #8
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da00      	bge.n	80054dc <prvProcessReceivedCommands+0x40>
 80054da:	e092      	b.n	8005602 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054dc:	2308      	movs	r3, #8
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	3304      	adds	r3, #4
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7fe fb8a 	bl	8003c0a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054f6:	1d3b      	adds	r3, r7, #4
 80054f8:	0018      	movs	r0, r3
 80054fa:	f7ff ff6d 	bl	80053d8 <prvSampleTimeNow>
 80054fe:	0003      	movs	r3, r0
 8005500:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8005502:	2308      	movs	r3, #8
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b09      	cmp	r3, #9
 800550a:	d900      	bls.n	800550e <prvProcessReceivedCommands+0x72>
 800550c:	e07a      	b.n	8005604 <prvProcessReceivedCommands+0x168>
 800550e:	009a      	lsls	r2, r3, #2
 8005510:	4b44      	ldr	r3, [pc, #272]	; (8005624 <prvProcessReceivedCommands+0x188>)
 8005512:	18d3      	adds	r3, r2, r3
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	2228      	movs	r2, #40	; 0x28
 800551c:	5c9b      	ldrb	r3, [r3, r2]
 800551e:	2201      	movs	r2, #1
 8005520:	4313      	orrs	r3, r2
 8005522:	b2d9      	uxtb	r1, r3
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2228      	movs	r2, #40	; 0x28
 8005528:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800552a:	2008      	movs	r0, #8
 800552c:	183b      	adds	r3, r7, r0
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	18d1      	adds	r1, r2, r3
 8005536:	183b      	adds	r3, r7, r0
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	6a38      	ldr	r0, [r7, #32]
 800553e:	f7ff ff6b 	bl	8005418 <prvInsertTimerInActiveList>
 8005542:	1e03      	subs	r3, r0, #0
 8005544:	d05e      	beq.n	8005604 <prvProcessReceivedCommands+0x168>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	6a3a      	ldr	r2, [r7, #32]
 800554c:	0010      	movs	r0, r2
 800554e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	2228      	movs	r2, #40	; 0x28
 8005554:	5c9b      	ldrb	r3, [r3, r2]
 8005556:	001a      	movs	r2, r3
 8005558:	2304      	movs	r3, #4
 800555a:	4013      	ands	r3, r2
 800555c:	d052      	beq.n	8005604 <prvProcessReceivedCommands+0x168>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800555e:	2308      	movs	r3, #8
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	18d2      	adds	r2, r2, r3
 800556a:	6a38      	ldr	r0, [r7, #32]
 800556c:	2300      	movs	r3, #0
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2300      	movs	r3, #0
 8005572:	2100      	movs	r1, #0
 8005574:	f7ff fe22 	bl	80051bc <xTimerGenericCommand>
 8005578:	0003      	movs	r3, r0
 800557a:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d140      	bne.n	8005604 <prvProcessReceivedCommands+0x168>
 8005582:	b672      	cpsid	i
 8005584:	e7fe      	b.n	8005584 <prvProcessReceivedCommands+0xe8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	2228      	movs	r2, #40	; 0x28
 800558a:	5c9b      	ldrb	r3, [r3, r2]
 800558c:	2201      	movs	r2, #1
 800558e:	4393      	bics	r3, r2
 8005590:	b2d9      	uxtb	r1, r3
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2228      	movs	r2, #40	; 0x28
 8005596:	5499      	strb	r1, [r3, r2]
					break;
 8005598:	e034      	b.n	8005604 <prvProcessReceivedCommands+0x168>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	2228      	movs	r2, #40	; 0x28
 800559e:	5c9b      	ldrb	r3, [r3, r2]
 80055a0:	2201      	movs	r2, #1
 80055a2:	4313      	orrs	r3, r2
 80055a4:	b2d9      	uxtb	r1, r3
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	2228      	movs	r2, #40	; 0x28
 80055aa:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055ac:	2308      	movs	r3, #8
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <prvProcessReceivedCommands+0x126>
 80055be:	b672      	cpsid	i
 80055c0:	e7fe      	b.n	80055c0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	18d1      	adds	r1, r2, r3
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	6a38      	ldr	r0, [r7, #32]
 80055d0:	f7ff ff22 	bl	8005418 <prvInsertTimerInActiveList>
					break;
 80055d4:	e016      	b.n	8005604 <prvProcessReceivedCommands+0x168>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	2228      	movs	r2, #40	; 0x28
 80055da:	5c9b      	ldrb	r3, [r3, r2]
 80055dc:	001a      	movs	r2, r3
 80055de:	2302      	movs	r3, #2
 80055e0:	4013      	ands	r3, r2
 80055e2:	d104      	bne.n	80055ee <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 fa9e 	bl	8005b28 <vPortFree>
 80055ec:	e00a      	b.n	8005604 <prvProcessReceivedCommands+0x168>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	2228      	movs	r2, #40	; 0x28
 80055f2:	5c9b      	ldrb	r3, [r3, r2]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4393      	bics	r3, r2
 80055f8:	b2d9      	uxtb	r1, r3
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	2228      	movs	r2, #40	; 0x28
 80055fe:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005600:	e000      	b.n	8005604 <prvProcessReceivedCommands+0x168>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005602:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005604:	4b08      	ldr	r3, [pc, #32]	; (8005628 <prvProcessReceivedCommands+0x18c>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2208      	movs	r2, #8
 800560a:	18b9      	adds	r1, r7, r2
 800560c:	2200      	movs	r2, #0
 800560e:	0018      	movs	r0, r3
 8005610:	f7fe fd22 	bl	8004058 <xQueueReceive>
 8005614:	1e03      	subs	r3, r0, #0
 8005616:	d000      	beq.n	800561a <prvProcessReceivedCommands+0x17e>
 8005618:	e744      	b.n	80054a4 <prvProcessReceivedCommands+0x8>
	}
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b00a      	add	sp, #40	; 0x28
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	08005e78 	.word	0x08005e78
 8005628:	20000c18 	.word	0x20000c18

0800562c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005632:	e041      	b.n	80056b8 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005634:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <prvSwitchTimerLists+0xb4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563e:	4b28      	ldr	r3, [pc, #160]	; (80056e0 <prvSwitchTimerLists+0xb4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3304      	adds	r3, #4
 800564c:	0018      	movs	r0, r3
 800564e:	f7fe fadc 	bl	8003c0a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	0010      	movs	r0, r2
 800565a:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2228      	movs	r2, #40	; 0x28
 8005660:	5c9b      	ldrb	r3, [r3, r2]
 8005662:	001a      	movs	r2, r3
 8005664:	2304      	movs	r3, #4
 8005666:	4013      	ands	r3, r2
 8005668:	d026      	beq.n	80056b8 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	18d3      	adds	r3, r2, r3
 8005672:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	429a      	cmp	r2, r3
 800567a:	d90e      	bls.n	800569a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005688:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <prvSwitchTimerLists+0xb4>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3304      	adds	r3, #4
 8005690:	0019      	movs	r1, r3
 8005692:	0010      	movs	r0, r2
 8005694:	f7fe fa83 	bl	8003b9e <vListInsert>
 8005698:	e00e      	b.n	80056b8 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	2300      	movs	r3, #0
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	2300      	movs	r3, #0
 80056a4:	2100      	movs	r1, #0
 80056a6:	f7ff fd89 	bl	80051bc <xTimerGenericCommand>
 80056aa:	0003      	movs	r3, r0
 80056ac:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <prvSwitchTimerLists+0x8c>
 80056b4:	b672      	cpsid	i
 80056b6:	e7fe      	b.n	80056b6 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056b8:	4b09      	ldr	r3, [pc, #36]	; (80056e0 <prvSwitchTimerLists+0xb4>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1b8      	bne.n	8005634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056c2:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <prvSwitchTimerLists+0xb4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056c8:	4b06      	ldr	r3, [pc, #24]	; (80056e4 <prvSwitchTimerLists+0xb8>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <prvSwitchTimerLists+0xb4>)
 80056ce:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <prvSwitchTimerLists+0xb8>)
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	601a      	str	r2, [r3, #0]
}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	46bd      	mov	sp, r7
 80056da:	b006      	add	sp, #24
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	20000c10 	.word	0x20000c10
 80056e4:	20000c14 	.word	0x20000c14

080056e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056ee:	f000 f8d7 	bl	80058a0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056f2:	4b17      	ldr	r3, [pc, #92]	; (8005750 <prvCheckForValidListAndQueue+0x68>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d124      	bne.n	8005744 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 80056fa:	4b16      	ldr	r3, [pc, #88]	; (8005754 <prvCheckForValidListAndQueue+0x6c>)
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7fe fa03 	bl	8003b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <prvCheckForValidListAndQueue+0x70>)
 8005704:	0018      	movs	r0, r3
 8005706:	f7fe f9ff 	bl	8003b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800570a:	4b14      	ldr	r3, [pc, #80]	; (800575c <prvCheckForValidListAndQueue+0x74>)
 800570c:	4a11      	ldr	r2, [pc, #68]	; (8005754 <prvCheckForValidListAndQueue+0x6c>)
 800570e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005710:	4b13      	ldr	r3, [pc, #76]	; (8005760 <prvCheckForValidListAndQueue+0x78>)
 8005712:	4a11      	ldr	r2, [pc, #68]	; (8005758 <prvCheckForValidListAndQueue+0x70>)
 8005714:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005716:	4913      	ldr	r1, [pc, #76]	; (8005764 <prvCheckForValidListAndQueue+0x7c>)
 8005718:	4a13      	ldr	r2, [pc, #76]	; (8005768 <prvCheckForValidListAndQueue+0x80>)
 800571a:	2300      	movs	r3, #0
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	000b      	movs	r3, r1
 8005720:	2110      	movs	r1, #16
 8005722:	200a      	movs	r0, #10
 8005724:	f7fe faed 	bl	8003d02 <xQueueGenericCreateStatic>
 8005728:	0002      	movs	r2, r0
 800572a:	4b09      	ldr	r3, [pc, #36]	; (8005750 <prvCheckForValidListAndQueue+0x68>)
 800572c:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800572e:	4b08      	ldr	r3, [pc, #32]	; (8005750 <prvCheckForValidListAndQueue+0x68>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d006      	beq.n	8005744 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005736:	4b06      	ldr	r3, [pc, #24]	; (8005750 <prvCheckForValidListAndQueue+0x68>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a0c      	ldr	r2, [pc, #48]	; (800576c <prvCheckForValidListAndQueue+0x84>)
 800573c:	0011      	movs	r1, r2
 800573e:	0018      	movs	r0, r3
 8005740:	f7fe fe5c 	bl	80043fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005744:	f000 f8be 	bl	80058c4 <vPortExitCritical>
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	20000c18 	.word	0x20000c18
 8005754:	20000be8 	.word	0x20000be8
 8005758:	20000bfc 	.word	0x20000bfc
 800575c:	20000c10 	.word	0x20000c10
 8005760:	20000c14 	.word	0x20000c14
 8005764:	20000cc4 	.word	0x20000cc4
 8005768:	20000c24 	.word	0x20000c24
 800576c:	08005dd4 	.word	0x08005dd4

08005770 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3b04      	subs	r3, #4
 8005780:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	0452      	lsls	r2, r2, #17
 8005788:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3b04      	subs	r3, #4
 800578e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3b04      	subs	r3, #4
 800579a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800579c:	4a08      	ldr	r2, [pc, #32]	; (80057c0 <pxPortInitialiseStack+0x50>)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3b14      	subs	r3, #20
 80057a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3b20      	subs	r3, #32
 80057b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057b4:	68fb      	ldr	r3, [r7, #12]
}
 80057b6:	0018      	movs	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	b004      	add	sp, #16
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	46c0      	nop			; (mov r8, r8)
 80057c0:	080057c5 	.word	0x080057c5

080057c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80057ca:	2300      	movs	r3, #0
 80057cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <prvTaskExitError+0x28>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3301      	adds	r3, #1
 80057d4:	d001      	beq.n	80057da <prvTaskExitError+0x16>
 80057d6:	b672      	cpsid	i
 80057d8:	e7fe      	b.n	80057d8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80057da:	b672      	cpsid	i
	while( ulDummy == 0 )
 80057dc:	46c0      	nop			; (mov r8, r8)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0fc      	beq.n	80057de <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b002      	add	sp, #8
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80057f4:	46c0      	nop			; (mov r8, r8)
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	0000      	movs	r0, r0
 80057fc:	0000      	movs	r0, r0
	...

08005800 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005800:	4a0b      	ldr	r2, [pc, #44]	; (8005830 <pxCurrentTCBConst2>)
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	3020      	adds	r0, #32
 8005808:	f380 8809 	msr	PSP, r0
 800580c:	2002      	movs	r0, #2
 800580e:	f380 8814 	msr	CONTROL, r0
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005818:	46ae      	mov	lr, r5
 800581a:	bc08      	pop	{r3}
 800581c:	bc04      	pop	{r2}
 800581e:	b662      	cpsie	i
 8005820:	4718      	bx	r3
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	46c0      	nop			; (mov r8, r8)
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	46c0      	nop			; (mov r8, r8)
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	46c0      	nop			; (mov r8, r8)
 800582e:	46c0      	nop			; (mov r8, r8)

08005830 <pxCurrentTCBConst2>:
 8005830:	200006e8 	.word	0x200006e8
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005834:	46c0      	nop			; (mov r8, r8)
 8005836:	46c0      	nop			; (mov r8, r8)

08005838 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <xPortStartScheduler+0x40>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <xPortStartScheduler+0x40>)
 8005842:	21ff      	movs	r1, #255	; 0xff
 8005844:	0409      	lsls	r1, r1, #16
 8005846:	430a      	orrs	r2, r1
 8005848:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800584a:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <xPortStartScheduler+0x40>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <xPortStartScheduler+0x40>)
 8005850:	21ff      	movs	r1, #255	; 0xff
 8005852:	0609      	lsls	r1, r1, #24
 8005854:	430a      	orrs	r2, r1
 8005856:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005858:	f000 f898 	bl	800598c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800585c:	4b07      	ldr	r3, [pc, #28]	; (800587c <xPortStartScheduler+0x44>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005862:	f7ff ffcd 	bl	8005800 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005866:	f7ff f977 	bl	8004b58 <vTaskSwitchContext>
	prvTaskExitError();
 800586a:	f7ff ffab 	bl	80057c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800586e:	2300      	movs	r3, #0
}
 8005870:	0018      	movs	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	e000ed20 	.word	0xe000ed20
 800587c:	2000000c 	.word	0x2000000c

08005880 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <vPortYield+0x1c>)
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	0552      	lsls	r2, r2, #21
 800588a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800588c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005890:	f3bf 8f6f 	isb	sy
}
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80058a4:	b672      	cpsid	i
	uxCriticalNesting++;
 80058a6:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <vPortEnterCritical+0x20>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <vPortEnterCritical+0x20>)
 80058ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80058b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80058b4:	f3bf 8f6f 	isb	sy
}
 80058b8:	46c0      	nop			; (mov r8, r8)
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	2000000c 	.word	0x2000000c

080058c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <vPortExitCritical+0x2c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <vPortExitCritical+0x10>
 80058d0:	b672      	cpsid	i
 80058d2:	e7fe      	b.n	80058d2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80058d4:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <vPortExitCritical+0x2c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	1e5a      	subs	r2, r3, #1
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <vPortExitCritical+0x2c>)
 80058dc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <vPortExitCritical+0x2c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d100      	bne.n	80058e8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80058e6:	b662      	cpsie	i
	}
}
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	46c0      	nop			; (mov r8, r8)
 80058f0:	2000000c 	.word	0x2000000c

080058f4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80058f4:	f3ef 8010 	mrs	r0, PRIMASK
 80058f8:	b672      	cpsid	i
 80058fa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	0018      	movs	r0, r3

08005900 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005900:	f380 8810 	msr	PRIMASK, r0
 8005904:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8005906:	46c0      	nop			; (mov r8, r8)
	...

08005910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005910:	f3ef 8009 	mrs	r0, PSP
 8005914:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <pxCurrentTCBConst>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	3820      	subs	r0, #32
 800591a:	6010      	str	r0, [r2, #0]
 800591c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800591e:	4644      	mov	r4, r8
 8005920:	464d      	mov	r5, r9
 8005922:	4656      	mov	r6, sl
 8005924:	465f      	mov	r7, fp
 8005926:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005928:	b508      	push	{r3, lr}
 800592a:	b672      	cpsid	i
 800592c:	f7ff f914 	bl	8004b58 <vTaskSwitchContext>
 8005930:	b662      	cpsie	i
 8005932:	bc0c      	pop	{r2, r3}
 8005934:	6811      	ldr	r1, [r2, #0]
 8005936:	6808      	ldr	r0, [r1, #0]
 8005938:	3010      	adds	r0, #16
 800593a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800593c:	46a0      	mov	r8, r4
 800593e:	46a9      	mov	r9, r5
 8005940:	46b2      	mov	sl, r6
 8005942:	46bb      	mov	fp, r7
 8005944:	f380 8809 	msr	PSP, r0
 8005948:	3820      	subs	r0, #32
 800594a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800594c:	4718      	bx	r3
 800594e:	46c0      	nop			; (mov r8, r8)

08005950 <pxCurrentTCBConst>:
 8005950:	200006e8 	.word	0x200006e8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005954:	46c0      	nop			; (mov r8, r8)
 8005956:	46c0      	nop			; (mov r8, r8)

08005958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800595e:	f7ff ffc9 	bl	80058f4 <ulSetInterruptMaskFromISR>
 8005962:	0003      	movs	r3, r0
 8005964:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005966:	f7ff f847 	bl	80049f8 <xTaskIncrementTick>
 800596a:	1e03      	subs	r3, r0, #0
 800596c:	d003      	beq.n	8005976 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800596e:	4b06      	ldr	r3, [pc, #24]	; (8005988 <xPortSysTickHandler+0x30>)
 8005970:	2280      	movs	r2, #128	; 0x80
 8005972:	0552      	lsls	r2, r2, #21
 8005974:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0018      	movs	r0, r3
 800597a:	f7ff ffc1 	bl	8005900 <vClearInterruptMaskFromISR>
}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <vPortSetupTimerInterrupt+0x34>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <vPortSetupTimerInterrupt+0x38>)
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <vPortSetupTimerInterrupt+0x3c>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	23fa      	movs	r3, #250	; 0xfa
 80059a2:	0099      	lsls	r1, r3, #2
 80059a4:	0010      	movs	r0, r2
 80059a6:	f7fa fbaf 	bl	8000108 <__udivsi3>
 80059aa:	0003      	movs	r3, r0
 80059ac:	001a      	movs	r2, r3
 80059ae:	4b07      	ldr	r3, [pc, #28]	; (80059cc <vPortSetupTimerInterrupt+0x40>)
 80059b0:	3a01      	subs	r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80059b4:	4b02      	ldr	r3, [pc, #8]	; (80059c0 <vPortSetupTimerInterrupt+0x34>)
 80059b6:	2207      	movs	r2, #7
 80059b8:	601a      	str	r2, [r3, #0]
}
 80059ba:	46c0      	nop			; (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	e000e010 	.word	0xe000e010
 80059c4:	e000e018 	.word	0xe000e018
 80059c8:	20000000 	.word	0x20000000
 80059cc:	e000e014 	.word	0xe000e014

080059d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80059dc:	f7fe ff66 	bl	80048ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80059e0:	4b4b      	ldr	r3, [pc, #300]	; (8005b10 <pvPortMalloc+0x140>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80059e8:	f000 f8ec 	bl	8005bc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80059ec:	4b49      	ldr	r3, [pc, #292]	; (8005b14 <pvPortMalloc+0x144>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4013      	ands	r3, r2
 80059f4:	d000      	beq.n	80059f8 <pvPortMalloc+0x28>
 80059f6:	e07e      	b.n	8005af6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d012      	beq.n	8005a24 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80059fe:	2208      	movs	r2, #8
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	189b      	adds	r3, r3, r2
 8005a04:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2207      	movs	r2, #7
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d00a      	beq.n	8005a24 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2207      	movs	r2, #7
 8005a12:	4393      	bics	r3, r2
 8005a14:	3308      	adds	r3, #8
 8005a16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2207      	movs	r2, #7
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d001      	beq.n	8005a24 <pvPortMalloc+0x54>
 8005a20:	b672      	cpsid	i
 8005a22:	e7fe      	b.n	8005a22 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d065      	beq.n	8005af6 <pvPortMalloc+0x126>
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	; (8005b18 <pvPortMalloc+0x148>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d860      	bhi.n	8005af6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a34:	4b39      	ldr	r3, [pc, #228]	; (8005b1c <pvPortMalloc+0x14c>)
 8005a36:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005a38:	4b38      	ldr	r3, [pc, #224]	; (8005b1c <pvPortMalloc+0x14c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a3e:	e004      	b.n	8005a4a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d903      	bls.n	8005a5c <pvPortMalloc+0x8c>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f1      	bne.n	8005a40 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a5c:	4b2c      	ldr	r3, [pc, #176]	; (8005b10 <pvPortMalloc+0x140>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d047      	beq.n	8005af6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2208      	movs	r2, #8
 8005a6c:	189b      	adds	r3, r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	2308      	movs	r3, #8
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d916      	bls.n	8005ab6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	18d3      	adds	r3, r2, r3
 8005a8e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2207      	movs	r2, #7
 8005a94:	4013      	ands	r3, r2
 8005a96:	d001      	beq.n	8005a9c <pvPortMalloc+0xcc>
 8005a98:	b672      	cpsid	i
 8005a9a:	e7fe      	b.n	8005a9a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f000 f8e7 	bl	8005c84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <pvPortMalloc+0x148>)
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <pvPortMalloc+0x148>)
 8005ac2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ac4:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <pvPortMalloc+0x148>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <pvPortMalloc+0x150>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d203      	bcs.n	8005ad8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <pvPortMalloc+0x148>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	4b12      	ldr	r3, [pc, #72]	; (8005b20 <pvPortMalloc+0x150>)
 8005ad6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <pvPortMalloc+0x144>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005aec:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <pvPortMalloc+0x154>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	4b0c      	ldr	r3, [pc, #48]	; (8005b24 <pvPortMalloc+0x154>)
 8005af4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005af6:	f7fe fee5 	bl	80048c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2207      	movs	r2, #7
 8005afe:	4013      	ands	r3, r2
 8005b00:	d001      	beq.n	8005b06 <pvPortMalloc+0x136>
 8005b02:	b672      	cpsid	i
 8005b04:	e7fe      	b.n	8005b04 <pvPortMalloc+0x134>
	return pvReturn;
 8005b06:	68fb      	ldr	r3, [r7, #12]
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b006      	add	sp, #24
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	2000111c 	.word	0x2000111c
 8005b14:	20001130 	.word	0x20001130
 8005b18:	20001120 	.word	0x20001120
 8005b1c:	20001114 	.word	0x20001114
 8005b20:	20001124 	.word	0x20001124
 8005b24:	20001128 	.word	0x20001128

08005b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d03a      	beq.n	8005bb0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b3a:	2308      	movs	r3, #8
 8005b3c:	425b      	negs	r3, r3
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	18d3      	adds	r3, r2, r3
 8005b42:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <vPortFree+0x90>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4013      	ands	r3, r2
 8005b52:	d101      	bne.n	8005b58 <vPortFree+0x30>
 8005b54:	b672      	cpsid	i
 8005b56:	e7fe      	b.n	8005b56 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <vPortFree+0x3c>
 8005b60:	b672      	cpsid	i
 8005b62:	e7fe      	b.n	8005b62 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <vPortFree+0x90>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d01f      	beq.n	8005bb0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d11b      	bne.n	8005bb0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <vPortFree+0x90>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	43db      	mvns	r3, r3
 8005b82:	401a      	ands	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b88:	f7fe fe90 	bl	80048ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <vPortFree+0x94>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	18d2      	adds	r2, r2, r3
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <vPortFree+0x94>)
 8005b98:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f000 f871 	bl	8005c84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ba2:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <vPortFree+0x98>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <vPortFree+0x98>)
 8005baa:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8005bac:	f7fe fe8a 	bl	80048c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bb0:	46c0      	nop			; (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b004      	add	sp, #16
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	20001130 	.word	0x20001130
 8005bbc:	20001120 	.word	0x20001120
 8005bc0:	2000112c 	.word	0x2000112c

08005bc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005bca:	2380      	movs	r3, #128	; 0x80
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005bd0:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <prvHeapInit+0xa8>)
 8005bd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2207      	movs	r2, #7
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d00c      	beq.n	8005bf6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3307      	adds	r3, #7
 8005be0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2207      	movs	r2, #7
 8005be6:	4393      	bics	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <prvHeapInit+0xa8>)
 8005bf2:	18d3      	adds	r3, r2, r3
 8005bf4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005bfa:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <prvHeapInit+0xac>)
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c00:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <prvHeapInit+0xac>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	18d3      	adds	r3, r2, r3
 8005c0c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c0e:	2208      	movs	r2, #8
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1a9b      	subs	r3, r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2207      	movs	r2, #7
 8005c1a:	4393      	bics	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4b14      	ldr	r3, [pc, #80]	; (8005c74 <prvHeapInit+0xb0>)
 8005c22:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005c24:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <prvHeapInit+0xb0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c2c:	4b11      	ldr	r3, [pc, #68]	; (8005c74 <prvHeapInit+0xb0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	1ad2      	subs	r2, r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c42:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <prvHeapInit+0xb0>)
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <prvHeapInit+0xb4>)
 8005c50:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <prvHeapInit+0xb8>)
 8005c58:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <prvHeapInit+0xbc>)
 8005c5c:	2280      	movs	r2, #128	; 0x80
 8005c5e:	0612      	lsls	r2, r2, #24
 8005c60:	601a      	str	r2, [r3, #0]
}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b004      	add	sp, #16
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	20000d14 	.word	0x20000d14
 8005c70:	20001114 	.word	0x20001114
 8005c74:	2000111c 	.word	0x2000111c
 8005c78:	20001124 	.word	0x20001124
 8005c7c:	20001120 	.word	0x20001120
 8005c80:	20001130 	.word	0x20001130

08005c84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c8c:	4b27      	ldr	r3, [pc, #156]	; (8005d2c <prvInsertBlockIntoFreeList+0xa8>)
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e002      	b.n	8005c98 <prvInsertBlockIntoFreeList+0x14>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d8f7      	bhi.n	8005c92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	18d3      	adds	r3, r2, r3
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d108      	bne.n	8005cc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	18d2      	adds	r2, r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	18d2      	adds	r2, r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d118      	bne.n	8005d0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b14      	ldr	r3, [pc, #80]	; (8005d30 <prvInsertBlockIntoFreeList+0xac>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d00d      	beq.n	8005d02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	18d2      	adds	r2, r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e008      	b.n	8005d14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d02:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <prvInsertBlockIntoFreeList+0xac>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e003      	b.n	8005d14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d002      	beq.n	8005d22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	46bd      	mov	sp, r7
 8005d26:	b004      	add	sp, #16
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	20001114 	.word	0x20001114
 8005d30:	2000111c 	.word	0x2000111c

08005d34 <__libc_init_array>:
 8005d34:	b570      	push	{r4, r5, r6, lr}
 8005d36:	2600      	movs	r6, #0
 8005d38:	4d0c      	ldr	r5, [pc, #48]	; (8005d6c <__libc_init_array+0x38>)
 8005d3a:	4c0d      	ldr	r4, [pc, #52]	; (8005d70 <__libc_init_array+0x3c>)
 8005d3c:	1b64      	subs	r4, r4, r5
 8005d3e:	10a4      	asrs	r4, r4, #2
 8005d40:	42a6      	cmp	r6, r4
 8005d42:	d109      	bne.n	8005d58 <__libc_init_array+0x24>
 8005d44:	2600      	movs	r6, #0
 8005d46:	f000 f82b 	bl	8005da0 <_init>
 8005d4a:	4d0a      	ldr	r5, [pc, #40]	; (8005d74 <__libc_init_array+0x40>)
 8005d4c:	4c0a      	ldr	r4, [pc, #40]	; (8005d78 <__libc_init_array+0x44>)
 8005d4e:	1b64      	subs	r4, r4, r5
 8005d50:	10a4      	asrs	r4, r4, #2
 8005d52:	42a6      	cmp	r6, r4
 8005d54:	d105      	bne.n	8005d62 <__libc_init_array+0x2e>
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	00b3      	lsls	r3, r6, #2
 8005d5a:	58eb      	ldr	r3, [r5, r3]
 8005d5c:	4798      	blx	r3
 8005d5e:	3601      	adds	r6, #1
 8005d60:	e7ee      	b.n	8005d40 <__libc_init_array+0xc>
 8005d62:	00b3      	lsls	r3, r6, #2
 8005d64:	58eb      	ldr	r3, [r5, r3]
 8005d66:	4798      	blx	r3
 8005d68:	3601      	adds	r6, #1
 8005d6a:	e7f2      	b.n	8005d52 <__libc_init_array+0x1e>
 8005d6c:	08005ea8 	.word	0x08005ea8
 8005d70:	08005ea8 	.word	0x08005ea8
 8005d74:	08005ea8 	.word	0x08005ea8
 8005d78:	08005eac 	.word	0x08005eac

08005d7c <memcpy>:
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	b510      	push	{r4, lr}
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d100      	bne.n	8005d86 <memcpy+0xa>
 8005d84:	bd10      	pop	{r4, pc}
 8005d86:	5ccc      	ldrb	r4, [r1, r3]
 8005d88:	54c4      	strb	r4, [r0, r3]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	e7f8      	b.n	8005d80 <memcpy+0x4>

08005d8e <memset>:
 8005d8e:	0003      	movs	r3, r0
 8005d90:	1812      	adds	r2, r2, r0
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d100      	bne.n	8005d98 <memset+0xa>
 8005d96:	4770      	bx	lr
 8005d98:	7019      	strb	r1, [r3, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	e7f9      	b.n	8005d92 <memset+0x4>
	...

08005da0 <_init>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr

08005dac <_fini>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr
